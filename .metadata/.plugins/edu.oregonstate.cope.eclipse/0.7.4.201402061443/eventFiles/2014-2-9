
$@${"eventType":"FileInit"}
$@${"timestamp":"1391991071","text":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<classpath>\n\t<classpathentry kind=\"src\" path=\"src\"\/>\n\t<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER\/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType\/JavaSE-1.7\"\/>\n\t<classpathentry kind=\"output\" path=\"bin\"\/>\n<\/classpath>\n","entityAddress":"\/EclipseBejewllyProject\/.classpath","IDE":"eclipse","eventType":"resourceAdded"}
$@${"timestamp":"1391991071","text":"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<projectDescription>\n\t<name>EclipseBejewllyProject<\/name>\n\t<comment><\/comment>\n\t<projects>\n\t<\/projects>\n\t<buildSpec>\n\t\t<buildCommand>\n\t\t\t<name>org.eclipse.jdt.core.javabuilder<\/name>\n\t\t\t<arguments>\n\t\t\t<\/arguments>\n\t\t<\/buildCommand>\n\t<\/buildSpec>\n\t<natures>\n\t\t<nature>org.eclipse.jdt.core.javanature<\/nature>\n\t<\/natures>\n<\/projectDescription>\n","entityAddress":"\/EclipseBejewllyProject\/.project","IDE":"eclipse","eventType":"resourceAdded"}
$@${"timestamp":"1391991071","text":"eclipse.preferences.version=1\norg.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled\norg.eclipse.jdt.core.compiler.codegen.targetPlatform=1.7\norg.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve\norg.eclipse.jdt.core.compiler.compliance=1.7\norg.eclipse.jdt.core.compiler.debug.lineNumber=generate\norg.eclipse.jdt.core.compiler.debug.localVariable=generate\norg.eclipse.jdt.core.compiler.debug.sourceFile=generate\norg.eclipse.jdt.core.compiler.problem.assertIdentifier=error\norg.eclipse.jdt.core.compiler.problem.enumIdentifier=error\norg.eclipse.jdt.core.compiler.source=1.7\n","entityAddress":"\/EclipseBejewllyProject\/.settings\/org.eclipse.jdt.core.prefs","IDE":"eclipse","eventType":"resourceAdded"}
$@${"timestamp":"1391991090","text":"\r\nclass BejeweledScore {\r\n  private int current = 0;\r\n  public void addToScore(int points){\r\n    int multiplier = points - 2;\r\n    this.current += (points * multiplier);\r\n  }\r\n  public int getScore(){\r\n    return this.current;\r\n  }\r\n  public void resetScore(){\r\n    this.current = 0;\r\n  }\r\n}\r\n","entityAddress":"\/EclipseBejewllyProject\/src\/BejeweledScore.java","IDE":"eclipse","eventType":"resourceAdded"}
$@${"timestamp":"1391991090","text":"enum Piece\n{\n  BLANK(\" \"), STAR(\"*\"), UMBRELLA(\"^\"), SUN(\"O\"), DIAMOND(\"&\"), HEART(\"@\"), SPADE(\"$\"), CLUB(\"}\");\n  public String value;\n  private Piece(String value){\n    this.value = value;\n  }\n}\n\n\n\n\npublic class Bejewelly {\n  public static void main(String[] args) {\n    Board gameBoard = new Board();\n    \/\/gameBoard.clearScreen();\n    \/\/gameBoard.promptUser();\n    \/\/gameBoard.printInstructions();\n      \n    gameBoard.loadBoardTask1();\n    gameBoard.displayBoard();\n    int[] p1 = new int[2];\n    int[] p2 = new int[2];\n    p1[0] = 1;\n    p1[1] = 0;\n    p2[0] = 1;\n    p2[1] = 1;\n    System.out.println(\"Swapping [\" + p1[0] + \",\" + p1[1] + \"] and [\"+ p2[0] + \",\" + p2[1] + \"]\");\n    gameBoard.swapAnyTwoPieces(p1, p2);\n    gameBoard.displayBoard();\n    System.out.println(\"A sequence should have been created.\");\n    System.out.println(\"T or F: A sequence was created: \" + gameBoard.wasSequenceCreated());\n    gameBoard.swapAnyTwoPieces(p1, p2); \n    gameBoard.displayBoard();\n    System.out.println(\"When returned to an original state, there should be no sequence.\");\n    System.out.println(\"T or F: A sequence was created: \" + gameBoard.wasSequenceCreated());\n   \n    \n    System.out.println(\"Can you avoid swapping when a sequence is not created?\");\n    p2[0] = 0;\n    p2[1] = 0;\n    gameBoard.swapPiecesWhenAcceptable(p1, p2);\n    gameBoard.displayBoard();\n    System.out.println(\"Does that same function swap when it is acceptable?\");\n    p2[0] = 1;\n    p2[1] = 1;\n    gameBoard.swapPiecesWhenAcceptable(p1, p2);\n    gameBoard.displayBoard();\n    \n    \/\/ability to swap two elements (one game move)\n    \/\/upon swapping, check for matches\n    \/\/if a match occurs, delete the elements that match, add new pieces to the board\n    \/\/implement a scoring algorithm\n    \n    \/\/ swap any two elements\n    \n    \/\/ check if a sequence is created\n    \/\/ swap back if no sequence is created\n\n  }\n}","entityAddress":"\/EclipseBejewllyProject\/src\/Bejewelly.java","IDE":"eclipse","eventType":"resourceAdded"}
$@${"timestamp":"1391991090","text":"import java.util.Arrays;\r\n\r\nclass BejewellyUtils {\r\n\r\n  public static int[] concatAll(int[] first, int[]... rest) {\r\n    int totalLength = first.length;\r\n    for (int[] array : rest) {\r\n      totalLength += array.length;\r\n    }\r\n    int[] result = Arrays.copyOf(first, totalLength);\r\n    int offset = first.length;\r\n    for (int[] array : rest) {\r\n      System.arraycopy(array, 0, result, offset, array.length);\r\n      offset += array.length;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  public static int[][] concatAll(int[][] first, int[][]... rest) {\r\n    int totalLength = first.length;\r\n    for (int[][] array : rest) {\r\n      totalLength += array.length;\r\n    }\r\n    int[][] result = Arrays.copyOf(first, totalLength);\r\n    int offset = first.length;\r\n    for (int[][] array : rest) {\r\n      System.arraycopy(array, 0, result, offset, array.length);\r\n      offset += array.length;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  public static <T> T[] concatAll(T[] first, T[]... rest) {\r\n    int totalLength = first.length;\r\n    for (T[] array : rest) {\r\n      totalLength += array.length;\r\n    }\r\n    T[] result = Arrays.copyOf(first, totalLength);\r\n    int offset = first.length;\r\n    for (T[] array : rest) {\r\n      System.arraycopy(array, 0, result, offset, array.length);\r\n      offset += array.length;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  public static int[] joinArrays(int[] x, int[] y) {\r\n    int[] arr = new int[x.length + y.length];\r\n    System.arraycopy(x, 0, arr, 0, x.length);\r\n    System.arraycopy(y, 0, arr, x.length, y.length);\r\n    return arr;\r\n  }\r\n\r\n  public static int[] addPostions(int[] x, int[] y){  \r\n    int[] sequence = new int[x.length];\r\n    for(int i = x.length-1; i >= 0; i--){ \r\n       int addResult = y[i] + x[i];  \r\n       sequence[i] = addResult;\r\n    }\r\n    return sequence;\r\n  }  \r\n}","entityAddress":"\/EclipseBejewllyProject\/src\/BejewellyUtils.java","IDE":"eclipse","eventType":"resourceAdded"}
$@${"timestamp":"1391991090","text":"import java.io.Console;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.Random;\r\n\r\n\r\nclass Board {\r\n  public Piece[][] boardGrid;\r\n  public BejeweledScore scoreBoard;\r\n  private int BOARD_SIZE = 8;\r\n  private int[][] walkRow = {{1,0},{-1,0}};\r\n  private int[][] walkColumn = {{0,1},{0,-1}};\r\n  public Board(){\r\n    this.boardGrid = new Piece[BOARD_SIZE][BOARD_SIZE];\r\n    this.scoreBoard = new BejeweledScore();\r\n    loadNewBoard();\r\n  }\r\n\r\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n  \/\/ Participant-defined functions\r\n  \r\n  public void swapAnyTwoPieces(int[] piece_a, int[] piece_b){\r\n      Piece temp_a = this.boardGrid[piece_a[0]][piece_a[1]];\r\n      this.boardGrid[piece_a[0]][piece_a[1]] = this.boardGrid[piece_b[0]][piece_b[1]];\r\n      this.boardGrid[piece_b[0]][piece_b[1]] = temp_a;\r\n  }\r\n\r\n  public Boolean wasSequenceCreated(){\r\n      \/\/ Left\r\n      for (int i = 2; i < 8; i++){\r\n          for (int j = 0; j < 8; j++){\r\n              if (this.boardGrid[i][j] == this.boardGrid[i-1][j]){\r\n                  if (this.boardGrid[i][j] == this.boardGrid[i-2][j]){\r\n                      return true;\r\n                  }\r\n              }\r\n          }\r\n      }\r\n      \/\/System.out.println(\"Left completed\");\r\n      \/\/ Right\r\n      for (int i = 0; i < 6; i++){\r\n          for (int j = 0; j < 8; j++){\r\n              if (this.boardGrid[i][j] == this.boardGrid[i+1][j]){\r\n                  if (this.boardGrid[i][j] == this.boardGrid[i+2][j]){\r\n                      return true;\r\n                  }\r\n              }\r\n          }\r\n      }\r\n      \/\/System.out.println(\"Right completed\");\r\n      \/\/ Up\r\n      for (int i = 0; i < 8; i++){\r\n          for (int j = 2; j < 8; j++){\r\n              if (this.boardGrid[i][j] == this.boardGrid[i][j-1]){\r\n                  if (this.boardGrid[i][j] == this.boardGrid[i][j-2]){\r\n                      return true;\r\n                  }\r\n              }\r\n          }\r\n      }\r\n      \/\/System.out.println(\"Up completed\");\r\n      \/\/ Down\r\n      for (int i = 0; i < 8; i++){\r\n          for (int j = 0; j < 6; j++){\r\n              if (this.boardGrid[i][j] == this.boardGrid[i][j+1]){\r\n                  if (this.boardGrid[i][j] == this.boardGrid[i][j+2]){\r\n                      return true;\r\n                  }\r\n              }\r\n          }\r\n      }\r\n      \/\/System.out.println(\"Down completed\");\r\n      return false;\r\n  }\r\n  \r\n  public void swapPiecesWhenAcceptable(int[] piece_a, int[] piece_b){\r\n      swapAnyTwoPieces(piece_a, piece_b);\r\n      if (!wasSequenceCreated()){\r\n          swapAnyTwoPieces(piece_a,piece_b);\r\n      } else {\r\n          \r\n      }\r\n  }\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  public Piece gemAtLocation(String piece){\r\n    int[] array_coords = getCoordinates(piece);\r\n    int y = array_coords[0];\r\n    int x = array_coords[1];\r\n    System.out.println(\"Piece at x: \" + x + \" y: \" + y);\r\n    System.out.println(\"Gem is: \" + this.boardGrid[y][x]);\r\n    return this.boardGrid[y][x];\r\n  }  \r\n\r\n  public Piece gemAtLocation(int[] piece){\r\n    int y = piece[0];\r\n    int x = piece[1];\r\n    System.out.println(\"Piece at x: \" + x + \" y: \" + y);\r\n    System.out.println(\"Gem is: \" + this.boardGrid[y][x]);\r\n    return this.boardGrid[y][x];\r\n  }\r\n\r\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n  \/\/ Swap piece functions\r\n  public Boolean swapPieces(int[] piece_a, int[] piece_b){\r\n    if (piece_a == piece_b) {\r\n      return false;\r\n    }\r\n    locationSwap(piece_a, piece_b);\r\n    if (clearSequences(piece_b, piece_a)){\r\n      return true;\r\n    }\r\n    locationSwap(piece_b, piece_a);\r\n    return false;\r\n  }\r\n  public int[] temporarilySwapAndCheckPieces(int[] piece_a, int[] piece_b){\r\n    if (piece_a == piece_b) {\r\n      return null;\r\n    }\r\n    locationSwap(piece_a, piece_b);\r\n    if (hasSequence(piece_b)){\r\n      locationSwap(piece_b, piece_a);\r\n      return piece_b;\r\n    }\r\n    if (hasSequence(piece_a)){\r\n      locationSwap(piece_b, piece_a);\r\n      return piece_a;\r\n    }\r\n    locationSwap(piece_b, piece_a);\r\n    return null;\r\n  }  \r\n  public void locationSwap(int[] piece_a, int[] piece_b){\r\n    Piece temp_a = this.boardGrid[piece_a[0]][piece_a[1]];\r\n    this.boardGrid[piece_a[0]][piece_a[1]] = this.boardGrid[piece_b[0]][piece_b[1]];\r\n    this.boardGrid[piece_b[0]][piece_b[1]] = temp_a;\r\n  }\r\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n  \r\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n  \/\/ Console\/Display functions\r\n  public void clearScreen(){\r\n    System.out.println(\"\\033[H\\033[2J\"); \/\/ Clears terminal\r\n  }\r\n  public void displayBoard(){\r\n    \/\/System.out.println(\"      You're playing Bejwelly...\");\r\n      System.out.println(\"--+---+---+---+---+---+---+---+---+\");\r\n    \/\/System.out.println(\"      Current Score: \" + this.scoreBoard.getScore());\r\n    StringBuilder topRow = new StringBuilder();\r\n    topRow.append(\"  \");\r\n    for (int i = 0; i < BOARD_SIZE; i++) {\r\n      \/\/topRow.append(\"| \" + (i + 1) + \" \");\r\n        topRow.append(\"| \" + (i) + \" \");\r\n    }\r\n    topRow.append(\"|\");\r\n    System.out.println(topRow.toString());\r\n    for (int i = 0; i < BOARD_SIZE; i++) {\r\n      StringBuilder sb = new StringBuilder();\r\n      \/\/sb.append(getCharForNumber(i + 1) + \" |\");\r\n      sb.append(i + \" |\");\r\n      for (int j = 0; j < BOARD_SIZE; j++) {\r\n        \/\/ String[] boadGrid = this.boardGrid.get(i).toArray(new String[this.boardGrid.get(i).size()]);\r\n        \/\/ System.out.println(Arrays.toString(boadGrid));\r\n        sb.append(\" \" + this.boardGrid[i][j].value + \" \");\r\n        sb.append(\"|\");\r\n      }\r\n      System.out.println(sb.toString());\r\n    }\r\n  }\r\n  public void printInstructions(){\r\n    System.out.println(\"- Instructions:\");\r\n    System.out.println(\"- For each gem greater than 3 in a chain it becomes\");\r\n    System.out.println(\"- a multiplier. e.g. a 4 gem chain means the score is multiplied\");\r\n    System.out.println(\"- by 2, 5 gem chain means score is multiplied by 3 and so on...\");\r\n    System.out.println(\"- Type HELP at any point to see this again.\");\r\n    System.out.println(\"- Type RELOAD at any point to start over.\");\r\n    System.out.println(\"- Type CHECK to see if there are still available moves.\");\r\n    System.out.println(\"- Type HINT to see an available move\");\r\n    System.out.println(\"- Type QUIT to exit.\");\r\n  }\r\n  public void promptUser(){\r\n    Console console = System.console();\r\n    String selected_piece = console.readLine(\"Which piece would you like to move? (e.g 1A) \");\r\n    if (selected_piece.contains(\"*\")){\r\n      selected_piece = selected_piece.replace(\"*\", \"\");\r\n      int[] piece_array = getCoordinates(selected_piece);\r\n      System.out.println(\"Piece at \" + selected_piece + \" is \" + this.boardGrid[piece_array[0]][piece_array[1]]);\r\n      promptUser();\r\n    }\r\n    Boolean hadKeywords = checkForKeyWords(selected_piece);\r\n    char[] input_array = selected_piece.toCharArray();\r\n    if (!isValidEntry(input_array) && !hadKeywords){\r\n      System.out.println(\"Is not a valid entry\");\r\n      promptUser();\r\n    }\r\n    String direction_input = console.readLine(\"In which direction to swap? (U,D,L,R) \");\r\n    Boolean hadDirectionKeywords = checkForKeyWords(direction_input);\r\n    if (hadDirectionKeywords){\r\n      promptUser();\r\n    }\r\n    char[] direction_input_array = direction_input.toCharArray();\r\n    int[] piece_array = getCoordinates(selected_piece);\r\n    int[] swapping_piece = getSwappingPiece(direction_input, piece_array);\r\n    if (swapping_piece != null){\r\n      int previousScore = this.scoreBoard.getScore();\r\n      Boolean did_swap = swapPieces(piece_array, swapping_piece);\r\n      if (did_swap){\r\n        clearScreen();\r\n        displayBoard();\r\n        int newScore = this.scoreBoard.getScore();\r\n        int turnScore = newScore - previousScore;\r\n        System.out.println(\"YAY! You've made a chain. \" + turnScore + \" points.\");\r\n      } else {\r\n        System.out.println(\"No chain to be had. Swapping back.\");\r\n      }\r\n      promptUser();\r\n    } else {\r\n      System.out.println(\"Is not a valid move\");\r\n      promptUser();\r\n    }\r\n  }\r\n  private Boolean checkForKeyWords(String input){\r\n      if (input.contains(\"HELP\") || input.contains(\"help\")){\r\n        clearScreen();\r\n        displayBoard();\r\n        printInstructions();\r\n        promptUser();\r\n        return true;\r\n      }\r\n      if (input.contains(\"RELOAD\") || input.contains(\"reload\")){\r\n        this.scoreBoard.resetScore();\r\n        loadNewBoard();\r\n        clearScreen();\r\n        displayBoard();\r\n        promptUser();\r\n        return true;\r\n      }\r\n      if (input.contains(\"CHECK\") || input.contains(\"check\")){\r\n        int[] checkArray = areMovesStillAvailable();\r\n        if (checkArray != null && checkArray.length > 0){\r\n          System.out.println(\"There are indeed still moves available.\");\r\n        } else {\r\n          System.out.println(\"There are no more moves available. Feel free to RELOAD.\");\r\n        }\r\n        return true;\r\n      }\r\n      if (input.contains(\"HINT\") || input.contains(\"hint\")){\r\n        int[] checkArray = areMovesStillAvailable();\r\n        if (checkArray != null && checkArray.length > 0){\r\n          System.out.println(\"A sequence can be made if \" + (checkArray[1]+1) + getCharForNumber(checkArray[0]+1) + \" is swapped\");\r\n        } else {\r\n          System.out.println(\"There are no more moves available. Feel free to RELOAD.\");\r\n        }\r\n        return true;\r\n      }\r\n      if (input.contains(\"QUIT\") || input.contains(\"quit\")){\r\n        System.exit(0);\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n  \r\n  private void loadNewBoard(){\r\n    for (int i = 0; i < BOARD_SIZE; i++) {\r\n      for (int j = 0; j < BOARD_SIZE; j++) {\r\n        addRandomPieceAtLocation(i,j);\r\n      }\r\n    }\r\n  }\r\n  protected void loadBoardTask1(){\r\n\/\/      for (int i = 0; i < BOARD_SIZE; i++) {\r\n\/\/        for (int j = 0; j < BOARD_SIZE; j++) {\r\n\/\/            addPieceToBoardTheSameWay(i,j);\r\n\/\/        }\r\n\/\/      }\r\n      Piece[] array1 = {\r\n              Piece.values()[4],\r\n              Piece.values()[3],\r\n              Piece.values()[2],\r\n              Piece.values()[7],\r\n              Piece.values()[4],\r\n              Piece.values()[1],\r\n              Piece.values()[7],\r\n              Piece.values()[2]};\r\n      this.boardGrid[0] = array1;\r\n      \r\n      Piece[] array2 = {\r\n              Piece.values()[6],\r\n              Piece.values()[4],\r\n              Piece.values()[7],\r\n              Piece.values()[7],\r\n              Piece.values()[1],\r\n              Piece.values()[5],\r\n              Piece.values()[6],\r\n              Piece.values()[2]};\r\n      this.boardGrid[1] = array2;\r\n      \r\n      Piece[] array3 = {\r\n              Piece.values()[4],\r\n              Piece.values()[1],\r\n              Piece.values()[6],\r\n              Piece.values()[2],\r\n              Piece.values()[7],\r\n              Piece.values()[3],\r\n              Piece.values()[3],\r\n              Piece.values()[7]};\r\n      this.boardGrid[2] = array3;\r\n      \r\n      Piece[] array4 = {\r\n              Piece.values()[3],\r\n              Piece.values()[1],\r\n              Piece.values()[2],\r\n              Piece.values()[5],\r\n              Piece.values()[4],\r\n              Piece.values()[3],\r\n              Piece.values()[4],\r\n              Piece.values()[7]};\r\n      this.boardGrid[3] = array4;\r\n      \r\n      Piece[] array5 = {\r\n              Piece.values()[7],\r\n              Piece.values()[5],\r\n              Piece.values()[3],\r\n              Piece.values()[1],\r\n              Piece.values()[2],\r\n              Piece.values()[6],\r\n              Piece.values()[2],\r\n              Piece.values()[4]};\r\n      this.boardGrid[4] = array5;\r\n      \r\n      Piece[] array6 = {                  \r\n              Piece.values()[4],\r\n              Piece.values()[1],\r\n              Piece.values()[6],\r\n              Piece.values()[1],\r\n              Piece.values()[1],\r\n              Piece.values()[4],\r\n              Piece.values()[3],\r\n              Piece.values()[1]\r\n      };\r\n      this.boardGrid[5] = array6;\r\n      \r\n      Piece[] array7 = {\r\n              Piece.values()[6],\r\n              Piece.values()[5],\r\n              Piece.values()[4],\r\n              Piece.values()[6],\r\n              Piece.values()[4],\r\n              Piece.values()[3],\r\n              Piece.values()[4],\r\n              Piece.values()[6]};\r\n      this.boardGrid[6] = array7;\r\n      \r\n      Piece[] array8 = {\r\n              Piece.values()[3],\r\n              Piece.values()[6],\r\n              Piece.values()[6],\r\n              Piece.values()[4],\r\n              Piece.values()[2],\r\n              Piece.values()[2],\r\n              Piece.values()[3],\r\n              Piece.values()[3]};\r\n      this.boardGrid[7] = array8;\r\n    }\r\n  private void addPieceToBoardTheSameWay(int i, int j){\r\n      Random randomPiece = new Random();\r\n      int gemInt = randomPiece.nextInt(BOARD_SIZE-1) + 1;\r\n      this.boardGrid[i][j] = Piece.values()[2];\r\n      int[] newPieceArray = {i,j};\r\n      if (hasSequence(newPieceArray)){\r\n          \/\/addPieceToBoardTheSameWay(i,j);\r\n      } else {\r\n        return;\r\n      }\r\n    }\r\n  private void addRandomPieceAtLocation(int i, int j){\r\n    Random randomPiece = new Random();\r\n    int gemInt = randomPiece.nextInt(BOARD_SIZE-1) + 1;\r\n    this.boardGrid[i][j] = Piece.values()[gemInt];\r\n    int[] newPieceArray = {i,j};\r\n    if (hasSequence(newPieceArray)){\r\n      addRandomPieceAtLocation(i,j);\r\n    } else {\r\n      return;\r\n    }\r\n  }\r\n\r\n  private Boolean hasSequence(int[] currentLocation){\r\n    HashMap<String, int[][]> resultHash = getSequences(currentLocation);\r\n    if (resultHash.get(\"row\").length > 2 || resultHash.get(\"col\").length > 2){\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  private Boolean checkAndClear(HashMap<String, int[][]> sequence){\r\n    String[] keys = {\"row\",\"col\"};\r\n    Boolean hasSufficientLength = false;\r\n    for (String key : keys){\r\n      if (sequence.get(key).length > 2 ){\r\n        for(int[] pieceAt : sequence.get(key)){\r\n          removePiece(pieceAt);\r\n        }\r\n        this.scoreBoard.addToScore(sequence.get(key).length);\r\n        if (!hasSufficientLength){\r\n          hasSufficientLength = true;\r\n        }\r\n        checkSequenceAfterRemoval(sequence.get(key));\r\n      }\r\n    }\r\n    if (hasSufficientLength){\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  private void checkSequenceAfterRemoval(int[][] sequence){\r\n    for (int[] location : sequence){\r\n      HashMap<String, int[][]> current_sequence = getSequences(location);\r\n      Boolean requiredClearing = checkAndClear(current_sequence);\r\n    }\r\n  }\r\n\r\n  private Boolean clearSequences(int[] piece_a, int[] piece_b){\r\n    HashMap<String, int[][]> pc_a_sqs = getSequences(piece_a);\r\n    HashMap<String, int[][]> pc_b_sqs = getSequences(piece_b);\r\n    Boolean a_sequences = checkAndClear(pc_a_sqs);\r\n    Boolean b_sequences = checkAndClear(pc_b_sqs);\r\n    if (a_sequences || b_sequences){\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n  \/\/ Remove\/Replace pieces\r\n  private void removePiece(int[] pieceAt)\r\n  {\r\n    this.boardGrid[pieceAt[0]][pieceAt[1]] = Piece.BLANK;\r\n    fillInGap(pieceAt);\r\n  }\r\n  private void fillInGap(int[] pieceAt)\r\n  {\r\n    if(pieceAt[0] == 0)\r\n    {\r\n      addRandomPieceAtLocation(pieceAt[0],pieceAt[1]);\r\n    }\r\n    else\r\n    {\r\n      int[] coordinatesAbove = {pieceAt[0]-1, pieceAt[1]};\r\n      Piece pieceAbove = this.boardGrid[coordinatesAbove[0]][coordinatesAbove[1]];\r\n      this.boardGrid[coordinatesAbove[0]][coordinatesAbove[1]] = Piece.BLANK;\r\n      this.boardGrid[pieceAt[0]][pieceAt[1]] = pieceAbove;\r\n      removePiece(coordinatesAbove);\r\n    }\r\n  }\r\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n  \r\n  \r\n\r\n  private int[] areMovesStillAvailable(){\r\n    String[] directions = {\"U\",\"D\",\"L\",\"R\"};\r\n    for (int i = 0; i < BOARD_SIZE; i++) {\r\n      for (int j = 0; j < BOARD_SIZE; j++) {\r\n        int[] currentLocation = {i,j};\r\n        for (String direction : directions){\r\n          int[] neighborPiece = getSwappingPiece(direction, currentLocation);\r\n          if (neighborPiece != null){\r\n            int[] pieceCanSequence = temporarilySwapAndCheckPieces(neighborPiece, currentLocation);\r\n            if (pieceCanSequence != null && pieceCanSequence.length > 0){\r\n              return currentLocation;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private int[] getSwappingPiece(String direction_input, int[] piece_array){\r\n    if (direction_input.matches(\"[a-zA-Z]\")){\r\n      char direction = Character.toUpperCase(direction_input.charAt(0));\r\n      int y = piece_array[0];\r\n      int x = piece_array[1];\r\n      \/\/ System.out.println(\"x is: \" + x + \" y: \" + y);\r\n      if (direction == 'U' && y > 0){\r\n        int[] swapping_piece = {y-1, x};\r\n        return swapping_piece;\r\n      } else if (direction == 'D' && y < BOARD_SIZE-1) {\r\n        int[] swapping_piece = {y+1, x};\r\n        return swapping_piece;\r\n      } else if (direction == 'L' && x > 0) {\r\n        int[] swapping_piece = {y, x-1};\r\n        return swapping_piece;\r\n      } else if (direction == 'R' && x < BOARD_SIZE-1) {\r\n        int[] swapping_piece = {y, x+1};\r\n        return swapping_piece;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  \r\n  \r\n  \r\n  private HashMap<String, int[][]> getSequences(int[] currentLocation){\r\n    int[][] currentSequence = {currentLocation};\r\n    HashMap<String, int[][]> directionalSequences = new HashMap<String, int[][]>();\r\n    \/\/ Check horizontal \r\n    int[][] backwardRowDirection = walkChain(currentLocation, walkRow[0]);\r\n    int[][] forwardRowDirection = walkChain(currentLocation, walkRow[1]);\r\n    int[][] currentRowSequence = BejewellyUtils.concatAll(backwardRowDirection, currentSequence, forwardRowDirection);\r\n\r\n    directionalSequences.put(\"row\", currentRowSequence);\r\n    \/\/ Check vertical\r\n    int[][] backwardColDirection = walkChain(currentLocation, walkColumn[0]);\r\n    int[][] forwardColDirection = walkChain(currentLocation, walkColumn[1]);\r\n    int[][] currentColSequence = BejewellyUtils.concatAll(backwardColDirection, currentSequence, forwardColDirection);\r\n\r\n    directionalSequences.put(\"col\", currentColSequence);\r\n\r\n    return directionalSequences;\r\n  }\r\n  \r\n  private int[][] walkChain(int[] currentLocation, int[] vector){\r\n    ArrayList<int[]> completedSequence = new ArrayList<int[]>();\r\n    return walkChain(currentLocation, vector, completedSequence);\r\n  }\r\n\r\n  private int[][] walkChain(int[] currentLocation, int[] vector, ArrayList<int[]> completedSequence){\r\n    Piece firstPiece = this.boardGrid[currentLocation[0]][currentLocation[1]];\r\n    int[] nextLocation = BejewellyUtils.addPostions(currentLocation, vector);\r\n    if (isWithinBounds(nextLocation)){\r\n      Piece nextPiece = this.boardGrid[nextLocation[0]][nextLocation[1]];\r\n      if (firstPiece == nextPiece){\r\n        completedSequence.add(nextLocation);\r\n        return walkChain(nextLocation, vector, completedSequence);\r\n      }\r\n    }\r\n    int[][] sequence = new int[completedSequence.size()][];\r\n    sequence = completedSequence.toArray(sequence);\r\n    return sequence;\r\n  }\r\n\r\n  \r\n  \r\n  private Boolean isValidEntry(char[] input_array){\r\n    if (input_array.length > 1){\r\n      String firstPosition = Character.toString(input_array[0]);\r\n      String secondPosition = Character.toString(input_array[1]);\r\n      if (firstPosition.matches(\"[1-\"+BOARD_SIZE+\"]\") && secondPosition.matches(\"[a-hA-H]\")){\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  private int[] getCoordinates(String selected_piece){\r\n    int x = Character.getNumericValue(selected_piece.charAt(0))-1;\r\n    int y = getNumberForCharacter(Character.toUpperCase(selected_piece.charAt(1)))-1;\r\n    int[] coordinate_array = {y,x};\r\n    return coordinate_array;\r\n  }\r\n\r\n  private Boolean isWithinBounds(int[] piece_array){\r\n    int y = piece_array[0];\r\n    int x = piece_array[1];\r\n    if (y >= 0 && y <= BOARD_SIZE-1 && x >= 0 && x <= BOARD_SIZE-1){\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  \r\n\r\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n  \/\/ Utility functions\r\n  private String getCharForNumber(int i) {\r\n    return i > 0 && i < 27 ? String.valueOf((char)(i + 64)) : null;\r\n  }\r\n\r\n  private int getNumberForCharacter(char value) {\r\n    return (int)value-64;\r\n  }\r\n\r\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n}\r\n\r\n","entityAddress":"\/EclipseBejewllyProject\/src\/Board.java","IDE":"eclipse","eventType":"resourceAdded"}
$@${"timestamp":"1391991091","text":"import java.util.Arrays;\r\n\r\nclass BejewellyUtils {\r\n\r\n  public static int[] concatAll(int[] first, int[]... rest) {\r\n    int totalLength = first.length;\r\n    for (int[] array : rest) {\r\n      totalLength += array.length;\r\n    }\r\n    int[] result = Arrays.copyOf(first, totalLength);\r\n    int offset = first.length;\r\n    for (int[] array : rest) {\r\n      System.arraycopy(array, 0, result, offset, array.length);\r\n      offset += array.length;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  public static int[][] concatAll(int[][] first, int[][]... rest) {\r\n    int totalLength = first.length;\r\n    for (int[][] array : rest) {\r\n      totalLength += array.length;\r\n    }\r\n    int[][] result = Arrays.copyOf(first, totalLength);\r\n    int offset = first.length;\r\n    for (int[][] array : rest) {\r\n      System.arraycopy(array, 0, result, offset, array.length);\r\n      offset += array.length;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  public static <T> T[] concatAll(T[] first, T[]... rest) {\r\n    int totalLength = first.length;\r\n    for (T[] array : rest) {\r\n      totalLength += array.length;\r\n    }\r\n    T[] result = Arrays.copyOf(first, totalLength);\r\n    int offset = first.length;\r\n    for (T[] array : rest) {\r\n      System.arraycopy(array, 0, result, offset, array.length);\r\n      offset += array.length;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  public static int[] joinArrays(int[] x, int[] y) {\r\n    int[] arr = new int[x.length + y.length];\r\n    System.arraycopy(x, 0, arr, 0, x.length);\r\n    System.arraycopy(y, 0, arr, x.length, y.length);\r\n    return arr;\r\n  }\r\n\r\n  public static int[] addPostions(int[] x, int[] y){  \r\n    int[] sequence = new int[x.length];\r\n    for(int i = x.length-1; i >= 0; i--){ \r\n       int addResult = y[i] + x[i];  \r\n       sequence[i] = addResult;\r\n    }\r\n    return sequence;\r\n  }  \r\n}","entityAddress":"\/EclipseBejewllyProject\/src\/BejewellyUtils.java","IDE":"eclipse","eventType":"refresh"}
$@${"timestamp":"1391991091","text":"import java.io.Console;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.Random;\r\n\r\n\r\nclass Board {\r\n  public Piece[][] boardGrid;\r\n  public BejeweledScore scoreBoard;\r\n  private int BOARD_SIZE = 8;\r\n  private int[][] walkRow = {{1,0},{-1,0}};\r\n  private int[][] walkColumn = {{0,1},{0,-1}};\r\n  public Board(){\r\n    this.boardGrid = new Piece[BOARD_SIZE][BOARD_SIZE];\r\n    this.scoreBoard = new BejeweledScore();\r\n    loadNewBoard();\r\n  }\r\n\r\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n  \/\/ Participant-defined functions\r\n  \r\n  public void swapAnyTwoPieces(int[] piece_a, int[] piece_b){\r\n      Piece temp_a = this.boardGrid[piece_a[0]][piece_a[1]];\r\n      this.boardGrid[piece_a[0]][piece_a[1]] = this.boardGrid[piece_b[0]][piece_b[1]];\r\n      this.boardGrid[piece_b[0]][piece_b[1]] = temp_a;\r\n  }\r\n\r\n  public Boolean wasSequenceCreated(){\r\n      \/\/ Left\r\n      for (int i = 2; i < 8; i++){\r\n          for (int j = 0; j < 8; j++){\r\n              if (this.boardGrid[i][j] == this.boardGrid[i-1][j]){\r\n                  if (this.boardGrid[i][j] == this.boardGrid[i-2][j]){\r\n                      return true;\r\n                  }\r\n              }\r\n          }\r\n      }\r\n      \/\/System.out.println(\"Left completed\");\r\n      \/\/ Right\r\n      for (int i = 0; i < 6; i++){\r\n          for (int j = 0; j < 8; j++){\r\n              if (this.boardGrid[i][j] == this.boardGrid[i+1][j]){\r\n                  if (this.boardGrid[i][j] == this.boardGrid[i+2][j]){\r\n                      return true;\r\n                  }\r\n              }\r\n          }\r\n      }\r\n      \/\/System.out.println(\"Right completed\");\r\n      \/\/ Up\r\n      for (int i = 0; i < 8; i++){\r\n          for (int j = 2; j < 8; j++){\r\n              if (this.boardGrid[i][j] == this.boardGrid[i][j-1]){\r\n                  if (this.boardGrid[i][j] == this.boardGrid[i][j-2]){\r\n                      return true;\r\n                  }\r\n              }\r\n          }\r\n      }\r\n      \/\/System.out.println(\"Up completed\");\r\n      \/\/ Down\r\n      for (int i = 0; i < 8; i++){\r\n          for (int j = 0; j < 6; j++){\r\n              if (this.boardGrid[i][j] == this.boardGrid[i][j+1]){\r\n                  if (this.boardGrid[i][j] == this.boardGrid[i][j+2]){\r\n                      return true;\r\n                  }\r\n              }\r\n          }\r\n      }\r\n      \/\/System.out.println(\"Down completed\");\r\n      return false;\r\n  }\r\n  \r\n  public void swapPiecesWhenAcceptable(int[] piece_a, int[] piece_b){\r\n      swapAnyTwoPieces(piece_a, piece_b);\r\n      if (!wasSequenceCreated()){\r\n          swapAnyTwoPieces(piece_a,piece_b);\r\n      } else {\r\n          \r\n      }\r\n  }\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  public Piece gemAtLocation(String piece){\r\n    int[] array_coords = getCoordinates(piece);\r\n    int y = array_coords[0];\r\n    int x = array_coords[1];\r\n    System.out.println(\"Piece at x: \" + x + \" y: \" + y);\r\n    System.out.println(\"Gem is: \" + this.boardGrid[y][x]);\r\n    return this.boardGrid[y][x];\r\n  }  \r\n\r\n  public Piece gemAtLocation(int[] piece){\r\n    int y = piece[0];\r\n    int x = piece[1];\r\n    System.out.println(\"Piece at x: \" + x + \" y: \" + y);\r\n    System.out.println(\"Gem is: \" + this.boardGrid[y][x]);\r\n    return this.boardGrid[y][x];\r\n  }\r\n\r\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n  \/\/ Swap piece functions\r\n  public Boolean swapPieces(int[] piece_a, int[] piece_b){\r\n    if (piece_a == piece_b) {\r\n      return false;\r\n    }\r\n    locationSwap(piece_a, piece_b);\r\n    if (clearSequences(piece_b, piece_a)){\r\n      return true;\r\n    }\r\n    locationSwap(piece_b, piece_a);\r\n    return false;\r\n  }\r\n  public int[] temporarilySwapAndCheckPieces(int[] piece_a, int[] piece_b){\r\n    if (piece_a == piece_b) {\r\n      return null;\r\n    }\r\n    locationSwap(piece_a, piece_b);\r\n    if (hasSequence(piece_b)){\r\n      locationSwap(piece_b, piece_a);\r\n      return piece_b;\r\n    }\r\n    if (hasSequence(piece_a)){\r\n      locationSwap(piece_b, piece_a);\r\n      return piece_a;\r\n    }\r\n    locationSwap(piece_b, piece_a);\r\n    return null;\r\n  }  \r\n  public void locationSwap(int[] piece_a, int[] piece_b){\r\n    Piece temp_a = this.boardGrid[piece_a[0]][piece_a[1]];\r\n    this.boardGrid[piece_a[0]][piece_a[1]] = this.boardGrid[piece_b[0]][piece_b[1]];\r\n    this.boardGrid[piece_b[0]][piece_b[1]] = temp_a;\r\n  }\r\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n  \r\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n  \/\/ Console\/Display functions\r\n  public void clearScreen(){\r\n    System.out.println(\"\\033[H\\033[2J\"); \/\/ Clears terminal\r\n  }\r\n  public void displayBoard(){\r\n    \/\/System.out.println(\"      You're playing Bejwelly...\");\r\n      System.out.println(\"--+---+---+---+---+---+---+---+---+\");\r\n    \/\/System.out.println(\"      Current Score: \" + this.scoreBoard.getScore());\r\n    StringBuilder topRow = new StringBuilder();\r\n    topRow.append(\"  \");\r\n    for (int i = 0; i < BOARD_SIZE; i++) {\r\n      \/\/topRow.append(\"| \" + (i + 1) + \" \");\r\n        topRow.append(\"| \" + (i) + \" \");\r\n    }\r\n    topRow.append(\"|\");\r\n    System.out.println(topRow.toString());\r\n    for (int i = 0; i < BOARD_SIZE; i++) {\r\n      StringBuilder sb = new StringBuilder();\r\n      \/\/sb.append(getCharForNumber(i + 1) + \" |\");\r\n      sb.append(i + \" |\");\r\n      for (int j = 0; j < BOARD_SIZE; j++) {\r\n        \/\/ String[] boadGrid = this.boardGrid.get(i).toArray(new String[this.boardGrid.get(i).size()]);\r\n        \/\/ System.out.println(Arrays.toString(boadGrid));\r\n        sb.append(\" \" + this.boardGrid[i][j].value + \" \");\r\n        sb.append(\"|\");\r\n      }\r\n      System.out.println(sb.toString());\r\n    }\r\n  }\r\n  public void printInstructions(){\r\n    System.out.println(\"- Instructions:\");\r\n    System.out.println(\"- For each gem greater than 3 in a chain it becomes\");\r\n    System.out.println(\"- a multiplier. e.g. a 4 gem chain means the score is multiplied\");\r\n    System.out.println(\"- by 2, 5 gem chain means score is multiplied by 3 and so on...\");\r\n    System.out.println(\"- Type HELP at any point to see this again.\");\r\n    System.out.println(\"- Type RELOAD at any point to start over.\");\r\n    System.out.println(\"- Type CHECK to see if there are still available moves.\");\r\n    System.out.println(\"- Type HINT to see an available move\");\r\n    System.out.println(\"- Type QUIT to exit.\");\r\n  }\r\n  public void promptUser(){\r\n    Console console = System.console();\r\n    String selected_piece = console.readLine(\"Which piece would you like to move? (e.g 1A) \");\r\n    if (selected_piece.contains(\"*\")){\r\n      selected_piece = selected_piece.replace(\"*\", \"\");\r\n      int[] piece_array = getCoordinates(selected_piece);\r\n      System.out.println(\"Piece at \" + selected_piece + \" is \" + this.boardGrid[piece_array[0]][piece_array[1]]);\r\n      promptUser();\r\n    }\r\n    Boolean hadKeywords = checkForKeyWords(selected_piece);\r\n    char[] input_array = selected_piece.toCharArray();\r\n    if (!isValidEntry(input_array) && !hadKeywords){\r\n      System.out.println(\"Is not a valid entry\");\r\n      promptUser();\r\n    }\r\n    String direction_input = console.readLine(\"In which direction to swap? (U,D,L,R) \");\r\n    Boolean hadDirectionKeywords = checkForKeyWords(direction_input);\r\n    if (hadDirectionKeywords){\r\n      promptUser();\r\n    }\r\n    char[] direction_input_array = direction_input.toCharArray();\r\n    int[] piece_array = getCoordinates(selected_piece);\r\n    int[] swapping_piece = getSwappingPiece(direction_input, piece_array);\r\n    if (swapping_piece != null){\r\n      int previousScore = this.scoreBoard.getScore();\r\n      Boolean did_swap = swapPieces(piece_array, swapping_piece);\r\n      if (did_swap){\r\n        clearScreen();\r\n        displayBoard();\r\n        int newScore = this.scoreBoard.getScore();\r\n        int turnScore = newScore - previousScore;\r\n        System.out.println(\"YAY! You've made a chain. \" + turnScore + \" points.\");\r\n      } else {\r\n        System.out.println(\"No chain to be had. Swapping back.\");\r\n      }\r\n      promptUser();\r\n    } else {\r\n      System.out.println(\"Is not a valid move\");\r\n      promptUser();\r\n    }\r\n  }\r\n  private Boolean checkForKeyWords(String input){\r\n      if (input.contains(\"HELP\") || input.contains(\"help\")){\r\n        clearScreen();\r\n        displayBoard();\r\n        printInstructions();\r\n        promptUser();\r\n        return true;\r\n      }\r\n      if (input.contains(\"RELOAD\") || input.contains(\"reload\")){\r\n        this.scoreBoard.resetScore();\r\n        loadNewBoard();\r\n        clearScreen();\r\n        displayBoard();\r\n        promptUser();\r\n        return true;\r\n      }\r\n      if (input.contains(\"CHECK\") || input.contains(\"check\")){\r\n        int[] checkArray = areMovesStillAvailable();\r\n        if (checkArray != null && checkArray.length > 0){\r\n          System.out.println(\"There are indeed still moves available.\");\r\n        } else {\r\n          System.out.println(\"There are no more moves available. Feel free to RELOAD.\");\r\n        }\r\n        return true;\r\n      }\r\n      if (input.contains(\"HINT\") || input.contains(\"hint\")){\r\n        int[] checkArray = areMovesStillAvailable();\r\n        if (checkArray != null && checkArray.length > 0){\r\n          System.out.println(\"A sequence can be made if \" + (checkArray[1]+1) + getCharForNumber(checkArray[0]+1) + \" is swapped\");\r\n        } else {\r\n          System.out.println(\"There are no more moves available. Feel free to RELOAD.\");\r\n        }\r\n        return true;\r\n      }\r\n      if (input.contains(\"QUIT\") || input.contains(\"quit\")){\r\n        System.exit(0);\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n  \r\n  private void loadNewBoard(){\r\n    for (int i = 0; i < BOARD_SIZE; i++) {\r\n      for (int j = 0; j < BOARD_SIZE; j++) {\r\n        addRandomPieceAtLocation(i,j);\r\n      }\r\n    }\r\n  }\r\n  protected void loadBoardTask1(){\r\n\/\/      for (int i = 0; i < BOARD_SIZE; i++) {\r\n\/\/        for (int j = 0; j < BOARD_SIZE; j++) {\r\n\/\/            addPieceToBoardTheSameWay(i,j);\r\n\/\/        }\r\n\/\/      }\r\n      Piece[] array1 = {\r\n              Piece.values()[4],\r\n              Piece.values()[3],\r\n              Piece.values()[2],\r\n              Piece.values()[7],\r\n              Piece.values()[4],\r\n              Piece.values()[1],\r\n              Piece.values()[7],\r\n              Piece.values()[2]};\r\n      this.boardGrid[0] = array1;\r\n      \r\n      Piece[] array2 = {\r\n              Piece.values()[6],\r\n              Piece.values()[4],\r\n              Piece.values()[7],\r\n              Piece.values()[7],\r\n              Piece.values()[1],\r\n              Piece.values()[5],\r\n              Piece.values()[6],\r\n              Piece.values()[2]};\r\n      this.boardGrid[1] = array2;\r\n      \r\n      Piece[] array3 = {\r\n              Piece.values()[4],\r\n              Piece.values()[1],\r\n              Piece.values()[6],\r\n              Piece.values()[2],\r\n              Piece.values()[7],\r\n              Piece.values()[3],\r\n              Piece.values()[3],\r\n              Piece.values()[7]};\r\n      this.boardGrid[2] = array3;\r\n      \r\n      Piece[] array4 = {\r\n              Piece.values()[3],\r\n              Piece.values()[1],\r\n              Piece.values()[2],\r\n              Piece.values()[5],\r\n              Piece.values()[4],\r\n              Piece.values()[3],\r\n              Piece.values()[4],\r\n              Piece.values()[7]};\r\n      this.boardGrid[3] = array4;\r\n      \r\n      Piece[] array5 = {\r\n              Piece.values()[7],\r\n              Piece.values()[5],\r\n              Piece.values()[3],\r\n              Piece.values()[1],\r\n              Piece.values()[2],\r\n              Piece.values()[6],\r\n              Piece.values()[2],\r\n              Piece.values()[4]};\r\n      this.boardGrid[4] = array5;\r\n      \r\n      Piece[] array6 = {                  \r\n              Piece.values()[4],\r\n              Piece.values()[1],\r\n              Piece.values()[6],\r\n              Piece.values()[1],\r\n              Piece.values()[1],\r\n              Piece.values()[4],\r\n              Piece.values()[3],\r\n              Piece.values()[1]\r\n      };\r\n      this.boardGrid[5] = array6;\r\n      \r\n      Piece[] array7 = {\r\n              Piece.values()[6],\r\n              Piece.values()[5],\r\n              Piece.values()[4],\r\n              Piece.values()[6],\r\n              Piece.values()[4],\r\n              Piece.values()[3],\r\n              Piece.values()[4],\r\n              Piece.values()[6]};\r\n      this.boardGrid[6] = array7;\r\n      \r\n      Piece[] array8 = {\r\n              Piece.values()[3],\r\n              Piece.values()[6],\r\n              Piece.values()[6],\r\n              Piece.values()[4],\r\n              Piece.values()[2],\r\n              Piece.values()[2],\r\n              Piece.values()[3],\r\n              Piece.values()[3]};\r\n      this.boardGrid[7] = array8;\r\n    }\r\n  private void addPieceToBoardTheSameWay(int i, int j){\r\n      Random randomPiece = new Random();\r\n      int gemInt = randomPiece.nextInt(BOARD_SIZE-1) + 1;\r\n      this.boardGrid[i][j] = Piece.values()[2];\r\n      int[] newPieceArray = {i,j};\r\n      if (hasSequence(newPieceArray)){\r\n          \/\/addPieceToBoardTheSameWay(i,j);\r\n      } else {\r\n        return;\r\n      }\r\n    }\r\n  private void addRandomPieceAtLocation(int i, int j){\r\n    Random randomPiece = new Random();\r\n    int gemInt = randomPiece.nextInt(BOARD_SIZE-1) + 1;\r\n    this.boardGrid[i][j] = Piece.values()[gemInt];\r\n    int[] newPieceArray = {i,j};\r\n    if (hasSequence(newPieceArray)){\r\n      addRandomPieceAtLocation(i,j);\r\n    } else {\r\n      return;\r\n    }\r\n  }\r\n\r\n  private Boolean hasSequence(int[] currentLocation){\r\n    HashMap<String, int[][]> resultHash = getSequences(currentLocation);\r\n    if (resultHash.get(\"row\").length > 2 || resultHash.get(\"col\").length > 2){\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  private Boolean checkAndClear(HashMap<String, int[][]> sequence){\r\n    String[] keys = {\"row\",\"col\"};\r\n    Boolean hasSufficientLength = false;\r\n    for (String key : keys){\r\n      if (sequence.get(key).length > 2 ){\r\n        for(int[] pieceAt : sequence.get(key)){\r\n          removePiece(pieceAt);\r\n        }\r\n        this.scoreBoard.addToScore(sequence.get(key).length);\r\n        if (!hasSufficientLength){\r\n          hasSufficientLength = true;\r\n        }\r\n        checkSequenceAfterRemoval(sequence.get(key));\r\n      }\r\n    }\r\n    if (hasSufficientLength){\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  private void checkSequenceAfterRemoval(int[][] sequence){\r\n    for (int[] location : sequence){\r\n      HashMap<String, int[][]> current_sequence = getSequences(location);\r\n      Boolean requiredClearing = checkAndClear(current_sequence);\r\n    }\r\n  }\r\n\r\n  private Boolean clearSequences(int[] piece_a, int[] piece_b){\r\n    HashMap<String, int[][]> pc_a_sqs = getSequences(piece_a);\r\n    HashMap<String, int[][]> pc_b_sqs = getSequences(piece_b);\r\n    Boolean a_sequences = checkAndClear(pc_a_sqs);\r\n    Boolean b_sequences = checkAndClear(pc_b_sqs);\r\n    if (a_sequences || b_sequences){\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n  \/\/ Remove\/Replace pieces\r\n  private void removePiece(int[] pieceAt)\r\n  {\r\n    this.boardGrid[pieceAt[0]][pieceAt[1]] = Piece.BLANK;\r\n    fillInGap(pieceAt);\r\n  }\r\n  private void fillInGap(int[] pieceAt)\r\n  {\r\n    if(pieceAt[0] == 0)\r\n    {\r\n      addRandomPieceAtLocation(pieceAt[0],pieceAt[1]);\r\n    }\r\n    else\r\n    {\r\n      int[] coordinatesAbove = {pieceAt[0]-1, pieceAt[1]};\r\n      Piece pieceAbove = this.boardGrid[coordinatesAbove[0]][coordinatesAbove[1]];\r\n      this.boardGrid[coordinatesAbove[0]][coordinatesAbove[1]] = Piece.BLANK;\r\n      this.boardGrid[pieceAt[0]][pieceAt[1]] = pieceAbove;\r\n      removePiece(coordinatesAbove);\r\n    }\r\n  }\r\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n  \r\n  \r\n\r\n  private int[] areMovesStillAvailable(){\r\n    String[] directions = {\"U\",\"D\",\"L\",\"R\"};\r\n    for (int i = 0; i < BOARD_SIZE; i++) {\r\n      for (int j = 0; j < BOARD_SIZE; j++) {\r\n        int[] currentLocation = {i,j};\r\n        for (String direction : directions){\r\n          int[] neighborPiece = getSwappingPiece(direction, currentLocation);\r\n          if (neighborPiece != null){\r\n            int[] pieceCanSequence = temporarilySwapAndCheckPieces(neighborPiece, currentLocation);\r\n            if (pieceCanSequence != null && pieceCanSequence.length > 0){\r\n              return currentLocation;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private int[] getSwappingPiece(String direction_input, int[] piece_array){\r\n    if (direction_input.matches(\"[a-zA-Z]\")){\r\n      char direction = Character.toUpperCase(direction_input.charAt(0));\r\n      int y = piece_array[0];\r\n      int x = piece_array[1];\r\n      \/\/ System.out.println(\"x is: \" + x + \" y: \" + y);\r\n      if (direction == 'U' && y > 0){\r\n        int[] swapping_piece = {y-1, x};\r\n        return swapping_piece;\r\n      } else if (direction == 'D' && y < BOARD_SIZE-1) {\r\n        int[] swapping_piece = {y+1, x};\r\n        return swapping_piece;\r\n      } else if (direction == 'L' && x > 0) {\r\n        int[] swapping_piece = {y, x-1};\r\n        return swapping_piece;\r\n      } else if (direction == 'R' && x < BOARD_SIZE-1) {\r\n        int[] swapping_piece = {y, x+1};\r\n        return swapping_piece;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  \r\n  \r\n  \r\n  private HashMap<String, int[][]> getSequences(int[] currentLocation){\r\n    int[][] currentSequence = {currentLocation};\r\n    HashMap<String, int[][]> directionalSequences = new HashMap<String, int[][]>();\r\n    \/\/ Check horizontal \r\n    int[][] backwardRowDirection = walkChain(currentLocation, walkRow[0]);\r\n    int[][] forwardRowDirection = walkChain(currentLocation, walkRow[1]);\r\n    int[][] currentRowSequence = BejewellyUtils.concatAll(backwardRowDirection, currentSequence, forwardRowDirection);\r\n\r\n    directionalSequences.put(\"row\", currentRowSequence);\r\n    \/\/ Check vertical\r\n    int[][] backwardColDirection = walkChain(currentLocation, walkColumn[0]);\r\n    int[][] forwardColDirection = walkChain(currentLocation, walkColumn[1]);\r\n    int[][] currentColSequence = BejewellyUtils.concatAll(backwardColDirection, currentSequence, forwardColDirection);\r\n\r\n    directionalSequences.put(\"col\", currentColSequence);\r\n\r\n    return directionalSequences;\r\n  }\r\n  \r\n  private int[][] walkChain(int[] currentLocation, int[] vector){\r\n    ArrayList<int[]> completedSequence = new ArrayList<int[]>();\r\n    return walkChain(currentLocation, vector, completedSequence);\r\n  }\r\n\r\n  private int[][] walkChain(int[] currentLocation, int[] vector, ArrayList<int[]> completedSequence){\r\n    Piece firstPiece = this.boardGrid[currentLocation[0]][currentLocation[1]];\r\n    int[] nextLocation = BejewellyUtils.addPostions(currentLocation, vector);\r\n    if (isWithinBounds(nextLocation)){\r\n      Piece nextPiece = this.boardGrid[nextLocation[0]][nextLocation[1]];\r\n      if (firstPiece == nextPiece){\r\n        completedSequence.add(nextLocation);\r\n        return walkChain(nextLocation, vector, completedSequence);\r\n      }\r\n    }\r\n    int[][] sequence = new int[completedSequence.size()][];\r\n    sequence = completedSequence.toArray(sequence);\r\n    return sequence;\r\n  }\r\n\r\n  \r\n  \r\n  private Boolean isValidEntry(char[] input_array){\r\n    if (input_array.length > 1){\r\n      String firstPosition = Character.toString(input_array[0]);\r\n      String secondPosition = Character.toString(input_array[1]);\r\n      if (firstPosition.matches(\"[1-\"+BOARD_SIZE+\"]\") && secondPosition.matches(\"[a-hA-H]\")){\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  private int[] getCoordinates(String selected_piece){\r\n    int x = Character.getNumericValue(selected_piece.charAt(0))-1;\r\n    int y = getNumberForCharacter(Character.toUpperCase(selected_piece.charAt(1)))-1;\r\n    int[] coordinate_array = {y,x};\r\n    return coordinate_array;\r\n  }\r\n\r\n  private Boolean isWithinBounds(int[] piece_array){\r\n    int y = piece_array[0];\r\n    int x = piece_array[1];\r\n    if (y >= 0 && y <= BOARD_SIZE-1 && x >= 0 && x <= BOARD_SIZE-1){\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  \r\n\r\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n  \/\/ Utility functions\r\n  private String getCharForNumber(int i) {\r\n    return i > 0 && i < 27 ? String.valueOf((char)(i + 64)) : null;\r\n  }\r\n\r\n  private int getNumberForCharacter(char value) {\r\n    return (int)value-64;\r\n  }\r\n\r\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n}\r\n\r\n","entityAddress":"\/EclipseBejewllyProject\/src\/Board.java","IDE":"eclipse","eventType":"refresh"}
$@${"timestamp":"1391991113","entityAddress":"\/BejewledExperiment\/src\/BejeweledScore.java","IDE":"eclipse","eventType":"resourceRemoved"}
$@${"timestamp":"1391991113","status":{"filesAdded":[],"headCommit":"90f35cc92e253011c5cd88941ef39aa3b611ad20","filesRemoved":[],"branch":"master","filesModified":[]},"repoPath":"\/Users\/michaelhilton\/Development\/bejeweled_Experiment","IDE":"eclipse","eventType":"gitEvent"}
$@${"timestamp":"1391991113","text":"","entityAddress":"\/BejewledExperiment\/src\/Bejewelly.java","IDE":"eclipse","eventType":"refresh"}
$@${"timestamp":"1391991113","text":"","entityAddress":"\/BejewledExperiment\/src\/BejewellyUtils.java","IDE":"eclipse","eventType":"refresh"}
$@${"timestamp":"1391991113","text":"","entityAddress":"\/BejewledExperiment\/src\/Board.java","IDE":"eclipse","eventType":"refresh"}
$@${"timestamp":"1391991113","status":{"filesAdded":[],"headCommit":"90f35cc92e253011c5cd88941ef39aa3b611ad20","filesRemoved":[],"branch":"master","filesModified":[]},"repoPath":"\/Users\/michaelhilton\/Development\/bejeweled_Experiment","IDE":"eclipse","eventType":"gitEvent"}
$@${"timestamp":"1391991113","entityAddress":"\/BejewledExperiment\/src\/Bejewelly.java","IDE":"eclipse","eventType":"resourceRemoved"}
$@${"timestamp":"1391991113","entityAddress":"\/BejewledExperiment\/src\/BejewellyUtils.java","IDE":"eclipse","eventType":"resourceRemoved"}
$@${"timestamp":"1391991113","entityAddress":"\/BejewledExperiment\/src\/Board.java","IDE":"eclipse","eventType":"resourceRemoved"}
$@${"timestamp":"1391991114","entityAddress":"\/BejewledExperiment\/src\/Validation.java","IDE":"eclipse","eventType":"resourceRemoved"}
$@${"timestamp":"1391991140","refactoringId":"org.eclipse.jdt.ui.delete","IDE":"eclipse","refactoringArguments":{"resources":"0","element4":"\/src<{Bejewelly.java","element2":"\/src<{BejewellyUtils.java","subPackages":"false","element3":"\/src<{Board.java","accessors":"true","element1":"\/src<{BejeweledScore.java","elements":"4","version":"1.0"},"eventType":"refactoringLaunch"}
$@${"timestamp":"1391991140","entityAddress":"\/EclipseBejewllyProject\/src\/BejeweledScore.java","IDE":"eclipse","eventType":"resourceRemoved"}
$@${"timestamp":"1391991140","entityAddress":"\/EclipseBejewllyProject\/src\/Bejewelly.java","IDE":"eclipse","eventType":"resourceRemoved"}
$@${"timestamp":"1391991140","entityAddress":"\/EclipseBejewllyProject\/src\/BejewellyUtils.java","IDE":"eclipse","eventType":"resourceRemoved"}
$@${"timestamp":"1391991140","entityAddress":"\/EclipseBejewllyProject\/src\/Board.java","IDE":"eclipse","eventType":"resourceRemoved"}
$@${"timestamp":"1391991140","refactoringId":"org.eclipse.jdt.ui.delete","IDE":"eclipse","refactoringArguments":{"resources":"0","element4":"\/src<{Bejewelly.java","element2":"\/src<{BejewellyUtils.java","subPackages":"false","element3":"\/src<{Board.java","accessors":"true","element1":"\/src<{BejeweledScore.java","elements":"4","version":"1.0"},"eventType":"refactoringEnd"}
$@${"timestamp":"1391991185","text":"\r\nclass BejeweledScore {\r\n  private int current = 0;\r\n  public void addToScore(int points){\r\n    int multiplier = points - 2;\r\n    this.current += (points * multiplier);\r\n  }\r\n  public int getScore(){\r\n    return this.current;\r\n  }\r\n  public void resetScore(){\r\n    this.current = 0;\r\n  }\r\n}\r\n","entityAddress":"\/EclipseBejewllyProject\/src\/BejeweledScore.java","IDE":"eclipse","eventType":"resourceAdded"}
$@${"timestamp":"1391991185","text":"enum Piece\n{\n  BLANK(\" \"), STAR(\"*\"), UMBRELLA(\"^\"), SUN(\"O\"), DIAMOND(\"&\"), HEART(\"@\"), SPADE(\"$\"), CLUB(\"}\");\n  public String value;\n  private Piece(String value){\n    this.value = value;\n  }\n}\n\n\n\n\npublic class Bejewelly {\n  public static void main(String[] args) {\n    Board gameBoard = new Board();\n    \/\/gameBoard.clearScreen();\n    \/\/gameBoard.promptUser();\n    \/\/gameBoard.printInstructions();\n      \n    gameBoard.loadBoardTask1();\n    gameBoard.displayBoard();\n    int[] p1 = new int[2];\n    int[] p2 = new int[2];\n    p1[0] = 1;\n    p1[1] = 0;\n    p2[0] = 1;\n    p2[1] = 1;\n    System.out.println(\"Swapping [\" + p1[0] + \",\" + p1[1] + \"] and [\"+ p2[0] + \",\" + p2[1] + \"]\");\n    gameBoard.swapAnyTwoPieces(p1, p2);\n    gameBoard.displayBoard();\n    System.out.println(\"A sequence should have been created.\");\n    System.out.println(\"T or F: A sequence was created: \" + gameBoard.wasSequenceCreated());\n    gameBoard.swapAnyTwoPieces(p1, p2); \n    gameBoard.displayBoard();\n    System.out.println(\"When returned to an original state, there should be no sequence.\");\n    System.out.println(\"T or F: A sequence was created: \" + gameBoard.wasSequenceCreated());\n   \n    \n    System.out.println(\"Can you avoid swapping when a sequence is not created?\");\n    p2[0] = 0;\n    p2[1] = 0;\n    gameBoard.swapPiecesWhenAcceptable(p1, p2);\n    gameBoard.displayBoard();\n    System.out.println(\"Does that same function swap when it is acceptable?\");\n    p2[0] = 1;\n    p2[1] = 1;\n    gameBoard.swapPiecesWhenAcceptable(p1, p2);\n    gameBoard.displayBoard();\n    \n    \/\/ability to swap two elements (one game move)\n    \/\/upon swapping, check for matches\n    \/\/if a match occurs, delete the elements that match, add new pieces to the board\n    \/\/implement a scoring algorithm\n    \n    \/\/ swap any two elements\n    \n    \/\/ check if a sequence is created\n    \/\/ swap back if no sequence is created\n\n  }\n}","entityAddress":"\/EclipseBejewllyProject\/src\/Bejewelly.java","IDE":"eclipse","eventType":"resourceAdded"}
$@${"timestamp":"1391991185","text":"import java.util.Arrays;\r\n\r\nclass BejewellyUtils {\r\n\r\n  public static int[] concatAll(int[] first, int[]... rest) {\r\n    int totalLength = first.length;\r\n    for (int[] array : rest) {\r\n      totalLength += array.length;\r\n    }\r\n    int[] result = Arrays.copyOf(first, totalLength);\r\n    int offset = first.length;\r\n    for (int[] array : rest) {\r\n      System.arraycopy(array, 0, result, offset, array.length);\r\n      offset += array.length;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  public static int[][] concatAll(int[][] first, int[][]... rest) {\r\n    int totalLength = first.length;\r\n    for (int[][] array : rest) {\r\n      totalLength += array.length;\r\n    }\r\n    int[][] result = Arrays.copyOf(first, totalLength);\r\n    int offset = first.length;\r\n    for (int[][] array : rest) {\r\n      System.arraycopy(array, 0, result, offset, array.length);\r\n      offset += array.length;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  public static <T> T[] concatAll(T[] first, T[]... rest) {\r\n    int totalLength = first.length;\r\n    for (T[] array : rest) {\r\n      totalLength += array.length;\r\n    }\r\n    T[] result = Arrays.copyOf(first, totalLength);\r\n    int offset = first.length;\r\n    for (T[] array : rest) {\r\n      System.arraycopy(array, 0, result, offset, array.length);\r\n      offset += array.length;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  public static int[] joinArrays(int[] x, int[] y) {\r\n    int[] arr = new int[x.length + y.length];\r\n    System.arraycopy(x, 0, arr, 0, x.length);\r\n    System.arraycopy(y, 0, arr, x.length, y.length);\r\n    return arr;\r\n  }\r\n\r\n  public static int[] addPostions(int[] x, int[] y){  \r\n    int[] sequence = new int[x.length];\r\n    for(int i = x.length-1; i >= 0; i--){ \r\n       int addResult = y[i] + x[i];  \r\n       sequence[i] = addResult;\r\n    }\r\n    return sequence;\r\n  }  \r\n}","entityAddress":"\/EclipseBejewllyProject\/src\/BejewellyUtils.java","IDE":"eclipse","eventType":"resourceAdded"}
$@${"timestamp":"1391991185","text":"import java.io.Console;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.Random;\r\n\r\n\r\nclass Board {\r\n  public Piece[][] boardGrid;\r\n  public BejeweledScore scoreBoard;\r\n  private int BOARD_SIZE = 8;\r\n  private int[][] walkRow = {{1,0},{-1,0}};\r\n  private int[][] walkColumn = {{0,1},{0,-1}};\r\n  public Board(){\r\n    this.boardGrid = new Piece[BOARD_SIZE][BOARD_SIZE];\r\n    this.scoreBoard = new BejeweledScore();\r\n    loadNewBoard();\r\n  }\r\n\r\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n  \/\/ Participant-defined functions\r\n  \r\n  public void swapAnyTwoPieces(int[] piece_a, int[] piece_b){\r\n      Piece temp_a = this.boardGrid[piece_a[0]][piece_a[1]];\r\n      this.boardGrid[piece_a[0]][piece_a[1]] = this.boardGrid[piece_b[0]][piece_b[1]];\r\n      this.boardGrid[piece_b[0]][piece_b[1]] = temp_a;\r\n  }\r\n\r\n  public Boolean wasSequenceCreated(){\r\n      \/\/ Left\r\n      for (int i = 2; i < 8; i++){\r\n          for (int j = 0; j < 8; j++){\r\n              if (this.boardGrid[i][j] == this.boardGrid[i-1][j]){\r\n                  if (this.boardGrid[i][j] == this.boardGrid[i-2][j]){\r\n                      return true;\r\n                  }\r\n              }\r\n          }\r\n      }\r\n      \/\/System.out.println(\"Left completed\");\r\n      \/\/ Right\r\n      for (int i = 0; i < 6; i++){\r\n          for (int j = 0; j < 8; j++){\r\n              if (this.boardGrid[i][j] == this.boardGrid[i+1][j]){\r\n                  if (this.boardGrid[i][j] == this.boardGrid[i+2][j]){\r\n                      return true;\r\n                  }\r\n              }\r\n          }\r\n      }\r\n      \/\/System.out.println(\"Right completed\");\r\n      \/\/ Up\r\n      for (int i = 0; i < 8; i++){\r\n          for (int j = 2; j < 8; j++){\r\n              if (this.boardGrid[i][j] == this.boardGrid[i][j-1]){\r\n                  if (this.boardGrid[i][j] == this.boardGrid[i][j-2]){\r\n                      return true;\r\n                  }\r\n              }\r\n          }\r\n      }\r\n      \/\/System.out.println(\"Up completed\");\r\n      \/\/ Down\r\n      for (int i = 0; i < 8; i++){\r\n          for (int j = 0; j < 6; j++){\r\n              if (this.boardGrid[i][j] == this.boardGrid[i][j+1]){\r\n                  if (this.boardGrid[i][j] == this.boardGrid[i][j+2]){\r\n                      return true;\r\n                  }\r\n              }\r\n          }\r\n      }\r\n      \/\/System.out.println(\"Down completed\");\r\n      return false;\r\n  }\r\n  \r\n  public void swapPiecesWhenAcceptable(int[] piece_a, int[] piece_b){\r\n      swapAnyTwoPieces(piece_a, piece_b);\r\n      if (!wasSequenceCreated()){\r\n          swapAnyTwoPieces(piece_a,piece_b);\r\n      } else {\r\n          \r\n      }\r\n  }\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  public Piece gemAtLocation(String piece){\r\n    int[] array_coords = getCoordinates(piece);\r\n    int y = array_coords[0];\r\n    int x = array_coords[1];\r\n    System.out.println(\"Piece at x: \" + x + \" y: \" + y);\r\n    System.out.println(\"Gem is: \" + this.boardGrid[y][x]);\r\n    return this.boardGrid[y][x];\r\n  }  \r\n\r\n  public Piece gemAtLocation(int[] piece){\r\n    int y = piece[0];\r\n    int x = piece[1];\r\n    System.out.println(\"Piece at x: \" + x + \" y: \" + y);\r\n    System.out.println(\"Gem is: \" + this.boardGrid[y][x]);\r\n    return this.boardGrid[y][x];\r\n  }\r\n\r\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n  \/\/ Swap piece functions\r\n  public Boolean swapPieces(int[] piece_a, int[] piece_b){\r\n    if (piece_a == piece_b) {\r\n      return false;\r\n    }\r\n    locationSwap(piece_a, piece_b);\r\n    if (clearSequences(piece_b, piece_a)){\r\n      return true;\r\n    }\r\n    locationSwap(piece_b, piece_a);\r\n    return false;\r\n  }\r\n  public int[] temporarilySwapAndCheckPieces(int[] piece_a, int[] piece_b){\r\n    if (piece_a == piece_b) {\r\n      return null;\r\n    }\r\n    locationSwap(piece_a, piece_b);\r\n    if (hasSequence(piece_b)){\r\n      locationSwap(piece_b, piece_a);\r\n      return piece_b;\r\n    }\r\n    if (hasSequence(piece_a)){\r\n      locationSwap(piece_b, piece_a);\r\n      return piece_a;\r\n    }\r\n    locationSwap(piece_b, piece_a);\r\n    return null;\r\n  }  \r\n  public void locationSwap(int[] piece_a, int[] piece_b){\r\n    Piece temp_a = this.boardGrid[piece_a[0]][piece_a[1]];\r\n    this.boardGrid[piece_a[0]][piece_a[1]] = this.boardGrid[piece_b[0]][piece_b[1]];\r\n    this.boardGrid[piece_b[0]][piece_b[1]] = temp_a;\r\n  }\r\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n  \r\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n  \/\/ Console\/Display functions\r\n  public void clearScreen(){\r\n    System.out.println(\"\\033[H\\033[2J\"); \/\/ Clears terminal\r\n  }\r\n  public void displayBoard(){\r\n    \/\/System.out.println(\"      You're playing Bejwelly...\");\r\n      System.out.println(\"--+---+---+---+---+---+---+---+---+\");\r\n    \/\/System.out.println(\"      Current Score: \" + this.scoreBoard.getScore());\r\n    StringBuilder topRow = new StringBuilder();\r\n    topRow.append(\"  \");\r\n    for (int i = 0; i < BOARD_SIZE; i++) {\r\n      \/\/topRow.append(\"| \" + (i + 1) + \" \");\r\n        topRow.append(\"| \" + (i) + \" \");\r\n    }\r\n    topRow.append(\"|\");\r\n    System.out.println(topRow.toString());\r\n    for (int i = 0; i < BOARD_SIZE; i++) {\r\n      StringBuilder sb = new StringBuilder();\r\n      \/\/sb.append(getCharForNumber(i + 1) + \" |\");\r\n      sb.append(i + \" |\");\r\n      for (int j = 0; j < BOARD_SIZE; j++) {\r\n        \/\/ String[] boadGrid = this.boardGrid.get(i).toArray(new String[this.boardGrid.get(i).size()]);\r\n        \/\/ System.out.println(Arrays.toString(boadGrid));\r\n        sb.append(\" \" + this.boardGrid[i][j].value + \" \");\r\n        sb.append(\"|\");\r\n      }\r\n      System.out.println(sb.toString());\r\n    }\r\n  }\r\n  public void printInstructions(){\r\n    System.out.println(\"- Instructions:\");\r\n    System.out.println(\"- For each gem greater than 3 in a chain it becomes\");\r\n    System.out.println(\"- a multiplier. e.g. a 4 gem chain means the score is multiplied\");\r\n    System.out.println(\"- by 2, 5 gem chain means score is multiplied by 3 and so on...\");\r\n    System.out.println(\"- Type HELP at any point to see this again.\");\r\n    System.out.println(\"- Type RELOAD at any point to start over.\");\r\n    System.out.println(\"- Type CHECK to see if there are still available moves.\");\r\n    System.out.println(\"- Type HINT to see an available move\");\r\n    System.out.println(\"- Type QUIT to exit.\");\r\n  }\r\n  public void promptUser(){\r\n    Console console = System.console();\r\n    String selected_piece = console.readLine(\"Which piece would you like to move? (e.g 1A) \");\r\n    if (selected_piece.contains(\"*\")){\r\n      selected_piece = selected_piece.replace(\"*\", \"\");\r\n      int[] piece_array = getCoordinates(selected_piece);\r\n      System.out.println(\"Piece at \" + selected_piece + \" is \" + this.boardGrid[piece_array[0]][piece_array[1]]);\r\n      promptUser();\r\n    }\r\n    Boolean hadKeywords = checkForKeyWords(selected_piece);\r\n    char[] input_array = selected_piece.toCharArray();\r\n    if (!isValidEntry(input_array) && !hadKeywords){\r\n      System.out.println(\"Is not a valid entry\");\r\n      promptUser();\r\n    }\r\n    String direction_input = console.readLine(\"In which direction to swap? (U,D,L,R) \");\r\n    Boolean hadDirectionKeywords = checkForKeyWords(direction_input);\r\n    if (hadDirectionKeywords){\r\n      promptUser();\r\n    }\r\n    char[] direction_input_array = direction_input.toCharArray();\r\n    int[] piece_array = getCoordinates(selected_piece);\r\n    int[] swapping_piece = getSwappingPiece(direction_input, piece_array);\r\n    if (swapping_piece != null){\r\n      int previousScore = this.scoreBoard.getScore();\r\n      Boolean did_swap = swapPieces(piece_array, swapping_piece);\r\n      if (did_swap){\r\n        clearScreen();\r\n        displayBoard();\r\n        int newScore = this.scoreBoard.getScore();\r\n        int turnScore = newScore - previousScore;\r\n        System.out.println(\"YAY! You've made a chain. \" + turnScore + \" points.\");\r\n      } else {\r\n        System.out.println(\"No chain to be had. Swapping back.\");\r\n      }\r\n      promptUser();\r\n    } else {\r\n      System.out.println(\"Is not a valid move\");\r\n      promptUser();\r\n    }\r\n  }\r\n  private Boolean checkForKeyWords(String input){\r\n      if (input.contains(\"HELP\") || input.contains(\"help\")){\r\n        clearScreen();\r\n        displayBoard();\r\n        printInstructions();\r\n        promptUser();\r\n        return true;\r\n      }\r\n      if (input.contains(\"RELOAD\") || input.contains(\"reload\")){\r\n        this.scoreBoard.resetScore();\r\n        loadNewBoard();\r\n        clearScreen();\r\n        displayBoard();\r\n        promptUser();\r\n        return true;\r\n      }\r\n      if (input.contains(\"CHECK\") || input.contains(\"check\")){\r\n        int[] checkArray = areMovesStillAvailable();\r\n        if (checkArray != null && checkArray.length > 0){\r\n          System.out.println(\"There are indeed still moves available.\");\r\n        } else {\r\n          System.out.println(\"There are no more moves available. Feel free to RELOAD.\");\r\n        }\r\n        return true;\r\n      }\r\n      if (input.contains(\"HINT\") || input.contains(\"hint\")){\r\n        int[] checkArray = areMovesStillAvailable();\r\n        if (checkArray != null && checkArray.length > 0){\r\n          System.out.println(\"A sequence can be made if \" + (checkArray[1]+1) + getCharForNumber(checkArray[0]+1) + \" is swapped\");\r\n        } else {\r\n          System.out.println(\"There are no more moves available. Feel free to RELOAD.\");\r\n        }\r\n        return true;\r\n      }\r\n      if (input.contains(\"QUIT\") || input.contains(\"quit\")){\r\n        System.exit(0);\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n  \r\n  private void loadNewBoard(){\r\n    for (int i = 0; i < BOARD_SIZE; i++) {\r\n      for (int j = 0; j < BOARD_SIZE; j++) {\r\n        addRandomPieceAtLocation(i,j);\r\n      }\r\n    }\r\n  }\r\n  protected void loadBoardTask1(){\r\n\/\/      for (int i = 0; i < BOARD_SIZE; i++) {\r\n\/\/        for (int j = 0; j < BOARD_SIZE; j++) {\r\n\/\/            addPieceToBoardTheSameWay(i,j);\r\n\/\/        }\r\n\/\/      }\r\n      Piece[] array1 = {\r\n              Piece.values()[4],\r\n              Piece.values()[3],\r\n              Piece.values()[2],\r\n              Piece.values()[7],\r\n              Piece.values()[4],\r\n              Piece.values()[1],\r\n              Piece.values()[7],\r\n              Piece.values()[2]};\r\n      this.boardGrid[0] = array1;\r\n      \r\n      Piece[] array2 = {\r\n              Piece.values()[6],\r\n              Piece.values()[4],\r\n              Piece.values()[7],\r\n              Piece.values()[7],\r\n              Piece.values()[1],\r\n              Piece.values()[5],\r\n              Piece.values()[6],\r\n              Piece.values()[2]};\r\n      this.boardGrid[1] = array2;\r\n      \r\n      Piece[] array3 = {\r\n              Piece.values()[4],\r\n              Piece.values()[1],\r\n              Piece.values()[6],\r\n              Piece.values()[2],\r\n              Piece.values()[7],\r\n              Piece.values()[3],\r\n              Piece.values()[3],\r\n              Piece.values()[7]};\r\n      this.boardGrid[2] = array3;\r\n      \r\n      Piece[] array4 = {\r\n              Piece.values()[3],\r\n              Piece.values()[1],\r\n              Piece.values()[2],\r\n              Piece.values()[5],\r\n              Piece.values()[4],\r\n              Piece.values()[3],\r\n              Piece.values()[4],\r\n              Piece.values()[7]};\r\n      this.boardGrid[3] = array4;\r\n      \r\n      Piece[] array5 = {\r\n              Piece.values()[7],\r\n              Piece.values()[5],\r\n              Piece.values()[3],\r\n              Piece.values()[1],\r\n              Piece.values()[2],\r\n              Piece.values()[6],\r\n              Piece.values()[2],\r\n              Piece.values()[4]};\r\n      this.boardGrid[4] = array5;\r\n      \r\n      Piece[] array6 = {                  \r\n              Piece.values()[4],\r\n              Piece.values()[1],\r\n              Piece.values()[6],\r\n              Piece.values()[1],\r\n              Piece.values()[1],\r\n              Piece.values()[4],\r\n              Piece.values()[3],\r\n              Piece.values()[1]\r\n      };\r\n      this.boardGrid[5] = array6;\r\n      \r\n      Piece[] array7 = {\r\n              Piece.values()[6],\r\n              Piece.values()[5],\r\n              Piece.values()[4],\r\n              Piece.values()[6],\r\n              Piece.values()[4],\r\n              Piece.values()[3],\r\n              Piece.values()[4],\r\n              Piece.values()[6]};\r\n      this.boardGrid[6] = array7;\r\n      \r\n      Piece[] array8 = {\r\n              Piece.values()[3],\r\n              Piece.values()[6],\r\n              Piece.values()[6],\r\n              Piece.values()[4],\r\n              Piece.values()[2],\r\n              Piece.values()[2],\r\n              Piece.values()[3],\r\n              Piece.values()[3]};\r\n      this.boardGrid[7] = array8;\r\n    }\r\n  private void addPieceToBoardTheSameWay(int i, int j){\r\n      Random randomPiece = new Random();\r\n      int gemInt = randomPiece.nextInt(BOARD_SIZE-1) + 1;\r\n      this.boardGrid[i][j] = Piece.values()[2];\r\n      int[] newPieceArray = {i,j};\r\n      if (hasSequence(newPieceArray)){\r\n          \/\/addPieceToBoardTheSameWay(i,j);\r\n      } else {\r\n        return;\r\n      }\r\n    }\r\n  private void addRandomPieceAtLocation(int i, int j){\r\n    Random randomPiece = new Random();\r\n    int gemInt = randomPiece.nextInt(BOARD_SIZE-1) + 1;\r\n    this.boardGrid[i][j] = Piece.values()[gemInt];\r\n    int[] newPieceArray = {i,j};\r\n    if (hasSequence(newPieceArray)){\r\n      addRandomPieceAtLocation(i,j);\r\n    } else {\r\n      return;\r\n    }\r\n  }\r\n\r\n  private Boolean hasSequence(int[] currentLocation){\r\n    HashMap<String, int[][]> resultHash = getSequences(currentLocation);\r\n    if (resultHash.get(\"row\").length > 2 || resultHash.get(\"col\").length > 2){\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  private Boolean checkAndClear(HashMap<String, int[][]> sequence){\r\n    String[] keys = {\"row\",\"col\"};\r\n    Boolean hasSufficientLength = false;\r\n    for (String key : keys){\r\n      if (sequence.get(key).length > 2 ){\r\n        for(int[] pieceAt : sequence.get(key)){\r\n          removePiece(pieceAt);\r\n        }\r\n        this.scoreBoard.addToScore(sequence.get(key).length);\r\n        if (!hasSufficientLength){\r\n          hasSufficientLength = true;\r\n        }\r\n        checkSequenceAfterRemoval(sequence.get(key));\r\n      }\r\n    }\r\n    if (hasSufficientLength){\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  private void checkSequenceAfterRemoval(int[][] sequence){\r\n    for (int[] location : sequence){\r\n      HashMap<String, int[][]> current_sequence = getSequences(location);\r\n      Boolean requiredClearing = checkAndClear(current_sequence);\r\n    }\r\n  }\r\n\r\n  private Boolean clearSequences(int[] piece_a, int[] piece_b){\r\n    HashMap<String, int[][]> pc_a_sqs = getSequences(piece_a);\r\n    HashMap<String, int[][]> pc_b_sqs = getSequences(piece_b);\r\n    Boolean a_sequences = checkAndClear(pc_a_sqs);\r\n    Boolean b_sequences = checkAndClear(pc_b_sqs);\r\n    if (a_sequences || b_sequences){\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n  \/\/ Remove\/Replace pieces\r\n  private void removePiece(int[] pieceAt)\r\n  {\r\n    this.boardGrid[pieceAt[0]][pieceAt[1]] = Piece.BLANK;\r\n    fillInGap(pieceAt);\r\n  }\r\n  private void fillInGap(int[] pieceAt)\r\n  {\r\n    if(pieceAt[0] == 0)\r\n    {\r\n      addRandomPieceAtLocation(pieceAt[0],pieceAt[1]);\r\n    }\r\n    else\r\n    {\r\n      int[] coordinatesAbove = {pieceAt[0]-1, pieceAt[1]};\r\n      Piece pieceAbove = this.boardGrid[coordinatesAbove[0]][coordinatesAbove[1]];\r\n      this.boardGrid[coordinatesAbove[0]][coordinatesAbove[1]] = Piece.BLANK;\r\n      this.boardGrid[pieceAt[0]][pieceAt[1]] = pieceAbove;\r\n      removePiece(coordinatesAbove);\r\n    }\r\n  }\r\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n  \r\n  \r\n\r\n  private int[] areMovesStillAvailable(){\r\n    String[] directions = {\"U\",\"D\",\"L\",\"R\"};\r\n    for (int i = 0; i < BOARD_SIZE; i++) {\r\n      for (int j = 0; j < BOARD_SIZE; j++) {\r\n        int[] currentLocation = {i,j};\r\n        for (String direction : directions){\r\n          int[] neighborPiece = getSwappingPiece(direction, currentLocation);\r\n          if (neighborPiece != null){\r\n            int[] pieceCanSequence = temporarilySwapAndCheckPieces(neighborPiece, currentLocation);\r\n            if (pieceCanSequence != null && pieceCanSequence.length > 0){\r\n              return currentLocation;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private int[] getSwappingPiece(String direction_input, int[] piece_array){\r\n    if (direction_input.matches(\"[a-zA-Z]\")){\r\n      char direction = Character.toUpperCase(direction_input.charAt(0));\r\n      int y = piece_array[0];\r\n      int x = piece_array[1];\r\n      \/\/ System.out.println(\"x is: \" + x + \" y: \" + y);\r\n      if (direction == 'U' && y > 0){\r\n        int[] swapping_piece = {y-1, x};\r\n        return swapping_piece;\r\n      } else if (direction == 'D' && y < BOARD_SIZE-1) {\r\n        int[] swapping_piece = {y+1, x};\r\n        return swapping_piece;\r\n      } else if (direction == 'L' && x > 0) {\r\n        int[] swapping_piece = {y, x-1};\r\n        return swapping_piece;\r\n      } else if (direction == 'R' && x < BOARD_SIZE-1) {\r\n        int[] swapping_piece = {y, x+1};\r\n        return swapping_piece;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  \r\n  \r\n  \r\n  private HashMap<String, int[][]> getSequences(int[] currentLocation){\r\n    int[][] currentSequence = {currentLocation};\r\n    HashMap<String, int[][]> directionalSequences = new HashMap<String, int[][]>();\r\n    \/\/ Check horizontal \r\n    int[][] backwardRowDirection = walkChain(currentLocation, walkRow[0]);\r\n    int[][] forwardRowDirection = walkChain(currentLocation, walkRow[1]);\r\n    int[][] currentRowSequence = BejewellyUtils.concatAll(backwardRowDirection, currentSequence, forwardRowDirection);\r\n\r\n    directionalSequences.put(\"row\", currentRowSequence);\r\n    \/\/ Check vertical\r\n    int[][] backwardColDirection = walkChain(currentLocation, walkColumn[0]);\r\n    int[][] forwardColDirection = walkChain(currentLocation, walkColumn[1]);\r\n    int[][] currentColSequence = BejewellyUtils.concatAll(backwardColDirection, currentSequence, forwardColDirection);\r\n\r\n    directionalSequences.put(\"col\", currentColSequence);\r\n\r\n    return directionalSequences;\r\n  }\r\n  \r\n  private int[][] walkChain(int[] currentLocation, int[] vector){\r\n    ArrayList<int[]> completedSequence = new ArrayList<int[]>();\r\n    return walkChain(currentLocation, vector, completedSequence);\r\n  }\r\n\r\n  private int[][] walkChain(int[] currentLocation, int[] vector, ArrayList<int[]> completedSequence){\r\n    Piece firstPiece = this.boardGrid[currentLocation[0]][currentLocation[1]];\r\n    int[] nextLocation = BejewellyUtils.addPostions(currentLocation, vector);\r\n    if (isWithinBounds(nextLocation)){\r\n      Piece nextPiece = this.boardGrid[nextLocation[0]][nextLocation[1]];\r\n      if (firstPiece == nextPiece){\r\n        completedSequence.add(nextLocation);\r\n        return walkChain(nextLocation, vector, completedSequence);\r\n      }\r\n    }\r\n    int[][] sequence = new int[completedSequence.size()][];\r\n    sequence = completedSequence.toArray(sequence);\r\n    return sequence;\r\n  }\r\n\r\n  \r\n  \r\n  private Boolean isValidEntry(char[] input_array){\r\n    if (input_array.length > 1){\r\n      String firstPosition = Character.toString(input_array[0]);\r\n      String secondPosition = Character.toString(input_array[1]);\r\n      if (firstPosition.matches(\"[1-\"+BOARD_SIZE+\"]\") && secondPosition.matches(\"[a-hA-H]\")){\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  private int[] getCoordinates(String selected_piece){\r\n    int x = Character.getNumericValue(selected_piece.charAt(0))-1;\r\n    int y = getNumberForCharacter(Character.toUpperCase(selected_piece.charAt(1)))-1;\r\n    int[] coordinate_array = {y,x};\r\n    return coordinate_array;\r\n  }\r\n\r\n  private Boolean isWithinBounds(int[] piece_array){\r\n    int y = piece_array[0];\r\n    int x = piece_array[1];\r\n    if (y >= 0 && y <= BOARD_SIZE-1 && x >= 0 && x <= BOARD_SIZE-1){\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  \r\n\r\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n  \/\/ Utility functions\r\n  private String getCharForNumber(int i) {\r\n    return i > 0 && i < 27 ? String.valueOf((char)(i + 64)) : null;\r\n  }\r\n\r\n  private int getNumberForCharacter(char value) {\r\n    return (int)value-64;\r\n  }\r\n\r\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n}\r\n\r\n","entityAddress":"\/EclipseBejewllyProject\/src\/Board.java","IDE":"eclipse","eventType":"resourceAdded"}
$@${"timestamp":"1391991185","text":"import java.util.Arrays;\r\n\r\nclass BejewellyUtils {\r\n\r\n  public static int[] concatAll(int[] first, int[]... rest) {\r\n    int totalLength = first.length;\r\n    for (int[] array : rest) {\r\n      totalLength += array.length;\r\n    }\r\n    int[] result = Arrays.copyOf(first, totalLength);\r\n    int offset = first.length;\r\n    for (int[] array : rest) {\r\n      System.arraycopy(array, 0, result, offset, array.length);\r\n      offset += array.length;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  public static int[][] concatAll(int[][] first, int[][]... rest) {\r\n    int totalLength = first.length;\r\n    for (int[][] array : rest) {\r\n      totalLength += array.length;\r\n    }\r\n    int[][] result = Arrays.copyOf(first, totalLength);\r\n    int offset = first.length;\r\n    for (int[][] array : rest) {\r\n      System.arraycopy(array, 0, result, offset, array.length);\r\n      offset += array.length;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  public static <T> T[] concatAll(T[] first, T[]... rest) {\r\n    int totalLength = first.length;\r\n    for (T[] array : rest) {\r\n      totalLength += array.length;\r\n    }\r\n    T[] result = Arrays.copyOf(first, totalLength);\r\n    int offset = first.length;\r\n    for (T[] array : rest) {\r\n      System.arraycopy(array, 0, result, offset, array.length);\r\n      offset += array.length;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  public static int[] joinArrays(int[] x, int[] y) {\r\n    int[] arr = new int[x.length + y.length];\r\n    System.arraycopy(x, 0, arr, 0, x.length);\r\n    System.arraycopy(y, 0, arr, x.length, y.length);\r\n    return arr;\r\n  }\r\n\r\n  public static int[] addPostions(int[] x, int[] y){  \r\n    int[] sequence = new int[x.length];\r\n    for(int i = x.length-1; i >= 0; i--){ \r\n       int addResult = y[i] + x[i];  \r\n       sequence[i] = addResult;\r\n    }\r\n    return sequence;\r\n  }  \r\n}","entityAddress":"\/EclipseBejewllyProject\/src\/BejewellyUtils.java","IDE":"eclipse","eventType":"refresh"}
$@${"timestamp":"1391991185","text":"import java.io.Console;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.Random;\r\n\r\n\r\nclass Board {\r\n  public Piece[][] boardGrid;\r\n  public BejeweledScore scoreBoard;\r\n  private int BOARD_SIZE = 8;\r\n  private int[][] walkRow = {{1,0},{-1,0}};\r\n  private int[][] walkColumn = {{0,1},{0,-1}};\r\n  public Board(){\r\n    this.boardGrid = new Piece[BOARD_SIZE][BOARD_SIZE];\r\n    this.scoreBoard = new BejeweledScore();\r\n    loadNewBoard();\r\n  }\r\n\r\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n  \/\/ Participant-defined functions\r\n  \r\n  public void swapAnyTwoPieces(int[] piece_a, int[] piece_b){\r\n      Piece temp_a = this.boardGrid[piece_a[0]][piece_a[1]];\r\n      this.boardGrid[piece_a[0]][piece_a[1]] = this.boardGrid[piece_b[0]][piece_b[1]];\r\n      this.boardGrid[piece_b[0]][piece_b[1]] = temp_a;\r\n  }\r\n\r\n  public Boolean wasSequenceCreated(){\r\n      \/\/ Left\r\n      for (int i = 2; i < 8; i++){\r\n          for (int j = 0; j < 8; j++){\r\n              if (this.boardGrid[i][j] == this.boardGrid[i-1][j]){\r\n                  if (this.boardGrid[i][j] == this.boardGrid[i-2][j]){\r\n                      return true;\r\n                  }\r\n              }\r\n          }\r\n      }\r\n      \/\/System.out.println(\"Left completed\");\r\n      \/\/ Right\r\n      for (int i = 0; i < 6; i++){\r\n          for (int j = 0; j < 8; j++){\r\n              if (this.boardGrid[i][j] == this.boardGrid[i+1][j]){\r\n                  if (this.boardGrid[i][j] == this.boardGrid[i+2][j]){\r\n                      return true;\r\n                  }\r\n              }\r\n          }\r\n      }\r\n      \/\/System.out.println(\"Right completed\");\r\n      \/\/ Up\r\n      for (int i = 0; i < 8; i++){\r\n          for (int j = 2; j < 8; j++){\r\n              if (this.boardGrid[i][j] == this.boardGrid[i][j-1]){\r\n                  if (this.boardGrid[i][j] == this.boardGrid[i][j-2]){\r\n                      return true;\r\n                  }\r\n              }\r\n          }\r\n      }\r\n      \/\/System.out.println(\"Up completed\");\r\n      \/\/ Down\r\n      for (int i = 0; i < 8; i++){\r\n          for (int j = 0; j < 6; j++){\r\n              if (this.boardGrid[i][j] == this.boardGrid[i][j+1]){\r\n                  if (this.boardGrid[i][j] == this.boardGrid[i][j+2]){\r\n                      return true;\r\n                  }\r\n              }\r\n          }\r\n      }\r\n      \/\/System.out.println(\"Down completed\");\r\n      return false;\r\n  }\r\n  \r\n  public void swapPiecesWhenAcceptable(int[] piece_a, int[] piece_b){\r\n      swapAnyTwoPieces(piece_a, piece_b);\r\n      if (!wasSequenceCreated()){\r\n          swapAnyTwoPieces(piece_a,piece_b);\r\n      } else {\r\n          \r\n      }\r\n  }\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  public Piece gemAtLocation(String piece){\r\n    int[] array_coords = getCoordinates(piece);\r\n    int y = array_coords[0];\r\n    int x = array_coords[1];\r\n    System.out.println(\"Piece at x: \" + x + \" y: \" + y);\r\n    System.out.println(\"Gem is: \" + this.boardGrid[y][x]);\r\n    return this.boardGrid[y][x];\r\n  }  \r\n\r\n  public Piece gemAtLocation(int[] piece){\r\n    int y = piece[0];\r\n    int x = piece[1];\r\n    System.out.println(\"Piece at x: \" + x + \" y: \" + y);\r\n    System.out.println(\"Gem is: \" + this.boardGrid[y][x]);\r\n    return this.boardGrid[y][x];\r\n  }\r\n\r\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n  \/\/ Swap piece functions\r\n  public Boolean swapPieces(int[] piece_a, int[] piece_b){\r\n    if (piece_a == piece_b) {\r\n      return false;\r\n    }\r\n    locationSwap(piece_a, piece_b);\r\n    if (clearSequences(piece_b, piece_a)){\r\n      return true;\r\n    }\r\n    locationSwap(piece_b, piece_a);\r\n    return false;\r\n  }\r\n  public int[] temporarilySwapAndCheckPieces(int[] piece_a, int[] piece_b){\r\n    if (piece_a == piece_b) {\r\n      return null;\r\n    }\r\n    locationSwap(piece_a, piece_b);\r\n    if (hasSequence(piece_b)){\r\n      locationSwap(piece_b, piece_a);\r\n      return piece_b;\r\n    }\r\n    if (hasSequence(piece_a)){\r\n      locationSwap(piece_b, piece_a);\r\n      return piece_a;\r\n    }\r\n    locationSwap(piece_b, piece_a);\r\n    return null;\r\n  }  \r\n  public void locationSwap(int[] piece_a, int[] piece_b){\r\n    Piece temp_a = this.boardGrid[piece_a[0]][piece_a[1]];\r\n    this.boardGrid[piece_a[0]][piece_a[1]] = this.boardGrid[piece_b[0]][piece_b[1]];\r\n    this.boardGrid[piece_b[0]][piece_b[1]] = temp_a;\r\n  }\r\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n  \r\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n  \/\/ Console\/Display functions\r\n  public void clearScreen(){\r\n    System.out.println(\"\\033[H\\033[2J\"); \/\/ Clears terminal\r\n  }\r\n  public void displayBoard(){\r\n    \/\/System.out.println(\"      You're playing Bejwelly...\");\r\n      System.out.println(\"--+---+---+---+---+---+---+---+---+\");\r\n    \/\/System.out.println(\"      Current Score: \" + this.scoreBoard.getScore());\r\n    StringBuilder topRow = new StringBuilder();\r\n    topRow.append(\"  \");\r\n    for (int i = 0; i < BOARD_SIZE; i++) {\r\n      \/\/topRow.append(\"| \" + (i + 1) + \" \");\r\n        topRow.append(\"| \" + (i) + \" \");\r\n    }\r\n    topRow.append(\"|\");\r\n    System.out.println(topRow.toString());\r\n    for (int i = 0; i < BOARD_SIZE; i++) {\r\n      StringBuilder sb = new StringBuilder();\r\n      \/\/sb.append(getCharForNumber(i + 1) + \" |\");\r\n      sb.append(i + \" |\");\r\n      for (int j = 0; j < BOARD_SIZE; j++) {\r\n        \/\/ String[] boadGrid = this.boardGrid.get(i).toArray(new String[this.boardGrid.get(i).size()]);\r\n        \/\/ System.out.println(Arrays.toString(boadGrid));\r\n        sb.append(\" \" + this.boardGrid[i][j].value + \" \");\r\n        sb.append(\"|\");\r\n      }\r\n      System.out.println(sb.toString());\r\n    }\r\n  }\r\n  public void printInstructions(){\r\n    System.out.println(\"- Instructions:\");\r\n    System.out.println(\"- For each gem greater than 3 in a chain it becomes\");\r\n    System.out.println(\"- a multiplier. e.g. a 4 gem chain means the score is multiplied\");\r\n    System.out.println(\"- by 2, 5 gem chain means score is multiplied by 3 and so on...\");\r\n    System.out.println(\"- Type HELP at any point to see this again.\");\r\n    System.out.println(\"- Type RELOAD at any point to start over.\");\r\n    System.out.println(\"- Type CHECK to see if there are still available moves.\");\r\n    System.out.println(\"- Type HINT to see an available move\");\r\n    System.out.println(\"- Type QUIT to exit.\");\r\n  }\r\n  public void promptUser(){\r\n    Console console = System.console();\r\n    String selected_piece = console.readLine(\"Which piece would you like to move? (e.g 1A) \");\r\n    if (selected_piece.contains(\"*\")){\r\n      selected_piece = selected_piece.replace(\"*\", \"\");\r\n      int[] piece_array = getCoordinates(selected_piece);\r\n      System.out.println(\"Piece at \" + selected_piece + \" is \" + this.boardGrid[piece_array[0]][piece_array[1]]);\r\n      promptUser();\r\n    }\r\n    Boolean hadKeywords = checkForKeyWords(selected_piece);\r\n    char[] input_array = selected_piece.toCharArray();\r\n    if (!isValidEntry(input_array) && !hadKeywords){\r\n      System.out.println(\"Is not a valid entry\");\r\n      promptUser();\r\n    }\r\n    String direction_input = console.readLine(\"In which direction to swap? (U,D,L,R) \");\r\n    Boolean hadDirectionKeywords = checkForKeyWords(direction_input);\r\n    if (hadDirectionKeywords){\r\n      promptUser();\r\n    }\r\n    char[] direction_input_array = direction_input.toCharArray();\r\n    int[] piece_array = getCoordinates(selected_piece);\r\n    int[] swapping_piece = getSwappingPiece(direction_input, piece_array);\r\n    if (swapping_piece != null){\r\n      int previousScore = this.scoreBoard.getScore();\r\n      Boolean did_swap = swapPieces(piece_array, swapping_piece);\r\n      if (did_swap){\r\n        clearScreen();\r\n        displayBoard();\r\n        int newScore = this.scoreBoard.getScore();\r\n        int turnScore = newScore - previousScore;\r\n        System.out.println(\"YAY! You've made a chain. \" + turnScore + \" points.\");\r\n      } else {\r\n        System.out.println(\"No chain to be had. Swapping back.\");\r\n      }\r\n      promptUser();\r\n    } else {\r\n      System.out.println(\"Is not a valid move\");\r\n      promptUser();\r\n    }\r\n  }\r\n  private Boolean checkForKeyWords(String input){\r\n      if (input.contains(\"HELP\") || input.contains(\"help\")){\r\n        clearScreen();\r\n        displayBoard();\r\n        printInstructions();\r\n        promptUser();\r\n        return true;\r\n      }\r\n      if (input.contains(\"RELOAD\") || input.contains(\"reload\")){\r\n        this.scoreBoard.resetScore();\r\n        loadNewBoard();\r\n        clearScreen();\r\n        displayBoard();\r\n        promptUser();\r\n        return true;\r\n      }\r\n      if (input.contains(\"CHECK\") || input.contains(\"check\")){\r\n        int[] checkArray = areMovesStillAvailable();\r\n        if (checkArray != null && checkArray.length > 0){\r\n          System.out.println(\"There are indeed still moves available.\");\r\n        } else {\r\n          System.out.println(\"There are no more moves available. Feel free to RELOAD.\");\r\n        }\r\n        return true;\r\n      }\r\n      if (input.contains(\"HINT\") || input.contains(\"hint\")){\r\n        int[] checkArray = areMovesStillAvailable();\r\n        if (checkArray != null && checkArray.length > 0){\r\n          System.out.println(\"A sequence can be made if \" + (checkArray[1]+1) + getCharForNumber(checkArray[0]+1) + \" is swapped\");\r\n        } else {\r\n          System.out.println(\"There are no more moves available. Feel free to RELOAD.\");\r\n        }\r\n        return true;\r\n      }\r\n      if (input.contains(\"QUIT\") || input.contains(\"quit\")){\r\n        System.exit(0);\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n  \r\n  private void loadNewBoard(){\r\n    for (int i = 0; i < BOARD_SIZE; i++) {\r\n      for (int j = 0; j < BOARD_SIZE; j++) {\r\n        addRandomPieceAtLocation(i,j);\r\n      }\r\n    }\r\n  }\r\n  protected void loadBoardTask1(){\r\n\/\/      for (int i = 0; i < BOARD_SIZE; i++) {\r\n\/\/        for (int j = 0; j < BOARD_SIZE; j++) {\r\n\/\/            addPieceToBoardTheSameWay(i,j);\r\n\/\/        }\r\n\/\/      }\r\n      Piece[] array1 = {\r\n              Piece.values()[4],\r\n              Piece.values()[3],\r\n              Piece.values()[2],\r\n              Piece.values()[7],\r\n              Piece.values()[4],\r\n              Piece.values()[1],\r\n              Piece.values()[7],\r\n              Piece.values()[2]};\r\n      this.boardGrid[0] = array1;\r\n      \r\n      Piece[] array2 = {\r\n              Piece.values()[6],\r\n              Piece.values()[4],\r\n              Piece.values()[7],\r\n              Piece.values()[7],\r\n              Piece.values()[1],\r\n              Piece.values()[5],\r\n              Piece.values()[6],\r\n              Piece.values()[2]};\r\n      this.boardGrid[1] = array2;\r\n      \r\n      Piece[] array3 = {\r\n              Piece.values()[4],\r\n              Piece.values()[1],\r\n              Piece.values()[6],\r\n              Piece.values()[2],\r\n              Piece.values()[7],\r\n              Piece.values()[3],\r\n              Piece.values()[3],\r\n              Piece.values()[7]};\r\n      this.boardGrid[2] = array3;\r\n      \r\n      Piece[] array4 = {\r\n              Piece.values()[3],\r\n              Piece.values()[1],\r\n              Piece.values()[2],\r\n              Piece.values()[5],\r\n              Piece.values()[4],\r\n              Piece.values()[3],\r\n              Piece.values()[4],\r\n              Piece.values()[7]};\r\n      this.boardGrid[3] = array4;\r\n      \r\n      Piece[] array5 = {\r\n              Piece.values()[7],\r\n              Piece.values()[5],\r\n              Piece.values()[3],\r\n              Piece.values()[1],\r\n              Piece.values()[2],\r\n              Piece.values()[6],\r\n              Piece.values()[2],\r\n              Piece.values()[4]};\r\n      this.boardGrid[4] = array5;\r\n      \r\n      Piece[] array6 = {                  \r\n              Piece.values()[4],\r\n              Piece.values()[1],\r\n              Piece.values()[6],\r\n              Piece.values()[1],\r\n              Piece.values()[1],\r\n              Piece.values()[4],\r\n              Piece.values()[3],\r\n              Piece.values()[1]\r\n      };\r\n      this.boardGrid[5] = array6;\r\n      \r\n      Piece[] array7 = {\r\n              Piece.values()[6],\r\n              Piece.values()[5],\r\n              Piece.values()[4],\r\n              Piece.values()[6],\r\n              Piece.values()[4],\r\n              Piece.values()[3],\r\n              Piece.values()[4],\r\n              Piece.values()[6]};\r\n      this.boardGrid[6] = array7;\r\n      \r\n      Piece[] array8 = {\r\n              Piece.values()[3],\r\n              Piece.values()[6],\r\n              Piece.values()[6],\r\n              Piece.values()[4],\r\n              Piece.values()[2],\r\n              Piece.values()[2],\r\n              Piece.values()[3],\r\n              Piece.values()[3]};\r\n      this.boardGrid[7] = array8;\r\n    }\r\n  private void addPieceToBoardTheSameWay(int i, int j){\r\n      Random randomPiece = new Random();\r\n      int gemInt = randomPiece.nextInt(BOARD_SIZE-1) + 1;\r\n      this.boardGrid[i][j] = Piece.values()[2];\r\n      int[] newPieceArray = {i,j};\r\n      if (hasSequence(newPieceArray)){\r\n          \/\/addPieceToBoardTheSameWay(i,j);\r\n      } else {\r\n        return;\r\n      }\r\n    }\r\n  private void addRandomPieceAtLocation(int i, int j){\r\n    Random randomPiece = new Random();\r\n    int gemInt = randomPiece.nextInt(BOARD_SIZE-1) + 1;\r\n    this.boardGrid[i][j] = Piece.values()[gemInt];\r\n    int[] newPieceArray = {i,j};\r\n    if (hasSequence(newPieceArray)){\r\n      addRandomPieceAtLocation(i,j);\r\n    } else {\r\n      return;\r\n    }\r\n  }\r\n\r\n  private Boolean hasSequence(int[] currentLocation){\r\n    HashMap<String, int[][]> resultHash = getSequences(currentLocation);\r\n    if (resultHash.get(\"row\").length > 2 || resultHash.get(\"col\").length > 2){\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  private Boolean checkAndClear(HashMap<String, int[][]> sequence){\r\n    String[] keys = {\"row\",\"col\"};\r\n    Boolean hasSufficientLength = false;\r\n    for (String key : keys){\r\n      if (sequence.get(key).length > 2 ){\r\n        for(int[] pieceAt : sequence.get(key)){\r\n          removePiece(pieceAt);\r\n        }\r\n        this.scoreBoard.addToScore(sequence.get(key).length);\r\n        if (!hasSufficientLength){\r\n          hasSufficientLength = true;\r\n        }\r\n        checkSequenceAfterRemoval(sequence.get(key));\r\n      }\r\n    }\r\n    if (hasSufficientLength){\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  private void checkSequenceAfterRemoval(int[][] sequence){\r\n    for (int[] location : sequence){\r\n      HashMap<String, int[][]> current_sequence = getSequences(location);\r\n      Boolean requiredClearing = checkAndClear(current_sequence);\r\n    }\r\n  }\r\n\r\n  private Boolean clearSequences(int[] piece_a, int[] piece_b){\r\n    HashMap<String, int[][]> pc_a_sqs = getSequences(piece_a);\r\n    HashMap<String, int[][]> pc_b_sqs = getSequences(piece_b);\r\n    Boolean a_sequences = checkAndClear(pc_a_sqs);\r\n    Boolean b_sequences = checkAndClear(pc_b_sqs);\r\n    if (a_sequences || b_sequences){\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n  \/\/ Remove\/Replace pieces\r\n  private void removePiece(int[] pieceAt)\r\n  {\r\n    this.boardGrid[pieceAt[0]][pieceAt[1]] = Piece.BLANK;\r\n    fillInGap(pieceAt);\r\n  }\r\n  private void fillInGap(int[] pieceAt)\r\n  {\r\n    if(pieceAt[0] == 0)\r\n    {\r\n      addRandomPieceAtLocation(pieceAt[0],pieceAt[1]);\r\n    }\r\n    else\r\n    {\r\n      int[] coordinatesAbove = {pieceAt[0]-1, pieceAt[1]};\r\n      Piece pieceAbove = this.boardGrid[coordinatesAbove[0]][coordinatesAbove[1]];\r\n      this.boardGrid[coordinatesAbove[0]][coordinatesAbove[1]] = Piece.BLANK;\r\n      this.boardGrid[pieceAt[0]][pieceAt[1]] = pieceAbove;\r\n      removePiece(coordinatesAbove);\r\n    }\r\n  }\r\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n  \r\n  \r\n\r\n  private int[] areMovesStillAvailable(){\r\n    String[] directions = {\"U\",\"D\",\"L\",\"R\"};\r\n    for (int i = 0; i < BOARD_SIZE; i++) {\r\n      for (int j = 0; j < BOARD_SIZE; j++) {\r\n        int[] currentLocation = {i,j};\r\n        for (String direction : directions){\r\n          int[] neighborPiece = getSwappingPiece(direction, currentLocation);\r\n          if (neighborPiece != null){\r\n            int[] pieceCanSequence = temporarilySwapAndCheckPieces(neighborPiece, currentLocation);\r\n            if (pieceCanSequence != null && pieceCanSequence.length > 0){\r\n              return currentLocation;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private int[] getSwappingPiece(String direction_input, int[] piece_array){\r\n    if (direction_input.matches(\"[a-zA-Z]\")){\r\n      char direction = Character.toUpperCase(direction_input.charAt(0));\r\n      int y = piece_array[0];\r\n      int x = piece_array[1];\r\n      \/\/ System.out.println(\"x is: \" + x + \" y: \" + y);\r\n      if (direction == 'U' && y > 0){\r\n        int[] swapping_piece = {y-1, x};\r\n        return swapping_piece;\r\n      } else if (direction == 'D' && y < BOARD_SIZE-1) {\r\n        int[] swapping_piece = {y+1, x};\r\n        return swapping_piece;\r\n      } else if (direction == 'L' && x > 0) {\r\n        int[] swapping_piece = {y, x-1};\r\n        return swapping_piece;\r\n      } else if (direction == 'R' && x < BOARD_SIZE-1) {\r\n        int[] swapping_piece = {y, x+1};\r\n        return swapping_piece;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  \r\n  \r\n  \r\n  private HashMap<String, int[][]> getSequences(int[] currentLocation){\r\n    int[][] currentSequence = {currentLocation};\r\n    HashMap<String, int[][]> directionalSequences = new HashMap<String, int[][]>();\r\n    \/\/ Check horizontal \r\n    int[][] backwardRowDirection = walkChain(currentLocation, walkRow[0]);\r\n    int[][] forwardRowDirection = walkChain(currentLocation, walkRow[1]);\r\n    int[][] currentRowSequence = BejewellyUtils.concatAll(backwardRowDirection, currentSequence, forwardRowDirection);\r\n\r\n    directionalSequences.put(\"row\", currentRowSequence);\r\n    \/\/ Check vertical\r\n    int[][] backwardColDirection = walkChain(currentLocation, walkColumn[0]);\r\n    int[][] forwardColDirection = walkChain(currentLocation, walkColumn[1]);\r\n    int[][] currentColSequence = BejewellyUtils.concatAll(backwardColDirection, currentSequence, forwardColDirection);\r\n\r\n    directionalSequences.put(\"col\", currentColSequence);\r\n\r\n    return directionalSequences;\r\n  }\r\n  \r\n  private int[][] walkChain(int[] currentLocation, int[] vector){\r\n    ArrayList<int[]> completedSequence = new ArrayList<int[]>();\r\n    return walkChain(currentLocation, vector, completedSequence);\r\n  }\r\n\r\n  private int[][] walkChain(int[] currentLocation, int[] vector, ArrayList<int[]> completedSequence){\r\n    Piece firstPiece = this.boardGrid[currentLocation[0]][currentLocation[1]];\r\n    int[] nextLocation = BejewellyUtils.addPostions(currentLocation, vector);\r\n    if (isWithinBounds(nextLocation)){\r\n      Piece nextPiece = this.boardGrid[nextLocation[0]][nextLocation[1]];\r\n      if (firstPiece == nextPiece){\r\n        completedSequence.add(nextLocation);\r\n        return walkChain(nextLocation, vector, completedSequence);\r\n      }\r\n    }\r\n    int[][] sequence = new int[completedSequence.size()][];\r\n    sequence = completedSequence.toArray(sequence);\r\n    return sequence;\r\n  }\r\n\r\n  \r\n  \r\n  private Boolean isValidEntry(char[] input_array){\r\n    if (input_array.length > 1){\r\n      String firstPosition = Character.toString(input_array[0]);\r\n      String secondPosition = Character.toString(input_array[1]);\r\n      if (firstPosition.matches(\"[1-\"+BOARD_SIZE+\"]\") && secondPosition.matches(\"[a-hA-H]\")){\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  private int[] getCoordinates(String selected_piece){\r\n    int x = Character.getNumericValue(selected_piece.charAt(0))-1;\r\n    int y = getNumberForCharacter(Character.toUpperCase(selected_piece.charAt(1)))-1;\r\n    int[] coordinate_array = {y,x};\r\n    return coordinate_array;\r\n  }\r\n\r\n  private Boolean isWithinBounds(int[] piece_array){\r\n    int y = piece_array[0];\r\n    int x = piece_array[1];\r\n    if (y >= 0 && y <= BOARD_SIZE-1 && x >= 0 && x <= BOARD_SIZE-1){\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  \r\n\r\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n  \/\/ Utility functions\r\n  private String getCharForNumber(int i) {\r\n    return i > 0 && i < 27 ? String.valueOf((char)(i + 64)) : null;\r\n  }\r\n\r\n  private int getNumberForCharacter(char value) {\r\n    return (int)value-64;\r\n  }\r\n\r\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n}\r\n\r\n","entityAddress":"\/EclipseBejewllyProject\/src\/Board.java","IDE":"eclipse","eventType":"refresh"}
$@${"timestamp":"1391991209","refactoringId":"org.eclipse.jdt.ui.delete","IDE":"eclipse","refactoringArguments":{"resources":"0","element4":"\/src<{Bejewelly.java","element2":"\/src<{BejewellyUtils.java","subPackages":"false","element3":"\/src<{Board.java","accessors":"true","element1":"\/src<{BejeweledScore.java","elements":"4","version":"1.0"},"eventType":"refactoringLaunch"}
$@${"timestamp":"1391991209","entityAddress":"\/EclipseBejewllyProject\/src\/BejeweledScore.java","IDE":"eclipse","eventType":"resourceRemoved"}
$@${"timestamp":"1391991209","entityAddress":"\/EclipseBejewllyProject\/src\/Bejewelly.java","IDE":"eclipse","eventType":"resourceRemoved"}
$@${"timestamp":"1391991209","entityAddress":"\/EclipseBejewllyProject\/src\/BejewellyUtils.java","IDE":"eclipse","eventType":"resourceRemoved"}
$@${"timestamp":"1391991209","entityAddress":"\/EclipseBejewllyProject\/src\/Board.java","IDE":"eclipse","eventType":"resourceRemoved"}
$@${"timestamp":"1391991209","refactoringId":"org.eclipse.jdt.ui.delete","IDE":"eclipse","refactoringArguments":{"resources":"0","element4":"\/src<{Bejewelly.java","element2":"\/src<{BejewellyUtils.java","subPackages":"false","element3":"\/src<{Board.java","accessors":"true","element1":"\/src<{BejeweledScore.java","elements":"4","version":"1.0"},"eventType":"refactoringEnd"}
$@${"timestamp":"1391991211","text":"\r\nclass BejeweledScore {\r\n  private int current = 0;\r\n  public void addToScore(int points){\r\n    int multiplier = points - 2;\r\n    this.current += (points * multiplier);\r\n  }\r\n  public int getScore(){\r\n    return this.current;\r\n  }\r\n  public void resetScore(){\r\n    this.current = 0;\r\n  }\r\n}\r\n","entityAddress":"\/EclipseBejewllyProject\/src\/BejeweledScore.java","IDE":"eclipse","eventType":"resourceAdded"}
$@${"timestamp":"1391991211","text":"\nenum Piece\n{\n  BLANK(\" \"), STAR(\"*\"), UMBRELLA(\"^\"), SUN(\"O\"), DIAMOND(\"&\"), HEART(\"@\"), SPADE(\"$\"), CLUB(\"}\");\n  public String value;\n  private Piece(String value){\n    this.value = value;\n  }\n}\n\npublic class Bejewelly {\n  public static void main(String[] args) {\n    Validation val = new Validation();\n    System.out.println(\"************** TASK1 **************\");\n    System.out.println(\"********* Swap C3 with C4 *********\");\n    System.out.println(\"***********************************\");  \n    Board gameBoard = new Board();\n    gameBoard.loadBoardTask1();\n    System.out.println(\"\");\n    System.out.println(\"********** Before Swap ************\");\n    gameBoard.displayBoard();\n    int[] piece_a = {2,3};\n    int[] piece_b = {2,4};\n   \n\n    \/\/FUNCTION TO SWAP ANY TWO PICES.  THIS MUST BE IMPLEMENTED IN BOARD.JAVA\n    gameBoard.swapAnyTwoPieces(piece_a,piece_b);\n    \/\/TODO REMOVE THIS FUNCTION ALSO\n    \/\/gameBoard.locationSwap(piece_a,piece_b);\n    \n    System.out.println(\"\");\n    System.out.println(\"*********** After Swap ************\");\n    gameBoard.displayBoard();\n    \n    System.out.println(\"\");\n    \n    System.out.println(\"******* Was Swap Performed? *******\");\n    System.out.println(\"SEQUENCE CREATED: \" + val.checkTask1(gameBoard));\n    System.out.println(\"\");\n    boolean task1done = val.checkTask1(gameBoard);\n    if(task1done){\n    \tSystem.out.println(\"TASK 1: [DONE]\");\n    }else{\n    \tSystem.out.println(\"TASK 1: [INCOMPLETE]\");\n    }\n    \/\/ String Task1_Result = checkTask1;\n    \/\/System.out.println(\"TASK 1: [INCOMPLETE]\");\n    System.out.println(\"\");\n    \n    System.out.println(\"************** TASK2 **************\");\n    System.out.println(\"****** Swap Created Sequence ******\");\n    System.out.println(\"***********************************\");  \n    Board gameBoard2 = new Board();\n    gameBoard2.loadBoardTask1();\n    gameBoard.displayBoard();\n    System.out.println(\"\");\n    System.out.println(\"****** Was Sequence Created? ******\");\n    System.out.println(\"SEQUENCE CREATED: \" + gameBoard.wasSequenceCreated());\n    boolean task2done = val.checkTask2(gameBoard);\n    System.out.println(\"\");\n    if(task2done){\n    \tSystem.out.println(\"TASK 2: [DONE]\");\n    }else{\n    \tSystem.out.println(\"TASK 2: [INCOMPLETE]\");\n    }\n    System.out.println(\"\");\n\n    System.out.println(\"************** TASK3 **************\");\n    System.out.println(\"** Swap Only if Sequence Created **\");\n    System.out.println(\"***********************************\"); \n    \n    System.out.println(\"******* Before Valid Swap *********\");\n    gameBoard.loadBoardTask1();\n    gameBoard.displayBoard();\n    System.out.println();\n    System.out.println(\"** Perform Valid Swap [C3 to C4] **\");\n    System.out.println();\n    \n    int[] piece_valid_a = {2,3};\n    int[] piece_valid_b = {2,4};\n    gameBoard.swapPiecesWhenAcceptable(piece_valid_a,piece_valid_b);\n    gameBoard.displayBoard();\n    System.out.println();\n    System.out.println(\"********* Did Swap Occur? *********\");\n    boolean checkTask3Valid = val.checkTask3Valid(gameBoard);\n    System.out.println(\"Swap Occured: \" + checkTask3Valid);\n    \n    System.out.println();\n    System.out.println(\"****** Before Invalid Swap ********\");\n    gameBoard.loadBoardTask1();\n    gameBoard.displayBoard();\n    System.out.println();\n    System.out.println(\"* Attempt Invalid Swap [C2 to C3] *\");\n    System.out.println();\n    \n    int[] piece_invalid_a = {2,2};\n    int[] piece_invalid_b = {2,3};\n    gameBoard.swapPiecesWhenAcceptable(piece_invalid_a,piece_invalid_b);\n    gameBoard.displayBoard();\n    System.out.println();\n    System.out.println(\"********* Did Swap Occur? *********\");\n    boolean checkTask3Invalid = val.checkTask3Invalid(gameBoard);\n\tSystem.out.println(\"Swap was NOT performed: \" + checkTask3Invalid);\n    System.out.println(\"\");\n    if(checkTask3Valid && checkTask3Invalid){\n    \tSystem.out.println(\"TASK 3: [DONE]\");\n    }else{\n    \tSystem.out.println(\"TASK 3: [INCOMPLETE]\");\n    }\n    System.out.println(\"\");\n    \n    \/*\n    int[] p1 = new int[2];\n    int[] p2 = new int[2];\n    p1[0] = 1;\n    p1[1] = 0;\n    p2[0] = 1;\n    p2[1] = 1;\n    System.out.println(\"Swapping [\" + p1[0] + \",\" + p1[1] + \"] and [\"+ p2[0] + \",\" + p2[1] + \"]\");\n    gameBoard.swapAnyTwoPieces(p1, p2);\n    gameBoard.displayBoard();\n    System.out.println(\"A sequence should have been created.\");\n    System.out.println(\"T or F: A sequence was created: \" + gameBoard.wasSequenceCreated());\n    gameBoard.swapAnyTwoPieces(p1, p2); \n    gameBoard.displayBoard();\n    System.out.println(\"When returned to an original state, there should be no sequence.\");\n    System.out.println(\"T or F: A sequence was created: \" + gameBoard.wasSequenceCreated());\n   \n    \n    System.out.println(\"Can you avoid swapping when a sequence is not created?\");\n    p2[0] = 0;\n    p2[1] = 0;\n    gameBoard.swapPiecesWhenAcceptable(p1, p2);\n    gameBoard.displayBoard();\n    System.out.println(\"Does that same function swap when it is acceptable?\");\n    p2[0] = 1;\n    p2[1] = 1;\n    gameBoard.swapPiecesWhenAcceptable(p1, p2);\n    gameBoard.displayBoard();\n    \n    \/\/ability to swap two elements (one game move)\n    \/\/upon swapping, check for matches\n    \/\/if a match occurs, delete the elements that match, add new pieces to the board\n    \/\/implement a scoring algorithm\n    \n    \/\/ swap any two elements\n    \n    \/\/ check if a sequence is created\n    \/\/ swap back if no sequence is created\n*\/\n  }\n}","entityAddress":"\/EclipseBejewllyProject\/src\/Bejewelly.java","IDE":"eclipse","eventType":"resourceAdded"}
$@${"timestamp":"1391991211","text":"import java.util.Arrays;\r\n\r\nclass BejewellyUtils {\r\n\r\n  public static int[] concatAll(int[] first, int[]... rest) {\r\n    int totalLength = first.length;\r\n    for (int[] array : rest) {\r\n      totalLength += array.length;\r\n    }\r\n    int[] result = Arrays.copyOf(first, totalLength);\r\n    int offset = first.length;\r\n    for (int[] array : rest) {\r\n      System.arraycopy(array, 0, result, offset, array.length);\r\n      offset += array.length;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  public static int[][] concatAll(int[][] first, int[][]... rest) {\r\n    int totalLength = first.length;\r\n    for (int[][] array : rest) {\r\n      totalLength += array.length;\r\n    }\r\n    int[][] result = Arrays.copyOf(first, totalLength);\r\n    int offset = first.length;\r\n    for (int[][] array : rest) {\r\n      System.arraycopy(array, 0, result, offset, array.length);\r\n      offset += array.length;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  public static <T> T[] concatAll(T[] first, T[]... rest) {\r\n    int totalLength = first.length;\r\n    for (T[] array : rest) {\r\n      totalLength += array.length;\r\n    }\r\n    T[] result = Arrays.copyOf(first, totalLength);\r\n    int offset = first.length;\r\n    for (T[] array : rest) {\r\n      System.arraycopy(array, 0, result, offset, array.length);\r\n      offset += array.length;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  public static int[] joinArrays(int[] x, int[] y) {\r\n    int[] arr = new int[x.length + y.length];\r\n    System.arraycopy(x, 0, arr, 0, x.length);\r\n    System.arraycopy(y, 0, arr, x.length, y.length);\r\n    return arr;\r\n  }\r\n\r\n  public static int[] addPostions(int[] x, int[] y){  \r\n    int[] sequence = new int[x.length];\r\n    for(int i = x.length-1; i >= 0; i--){ \r\n       int addResult = y[i] + x[i];  \r\n       sequence[i] = addResult;\r\n    }\r\n    return sequence;\r\n  }  \r\n}","entityAddress":"\/EclipseBejewllyProject\/src\/BejewellyUtils.java","IDE":"eclipse","eventType":"resourceAdded"}
$@${"timestamp":"1391991211","text":"import java.io.Console;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.Random;\r\n\r\n\r\nclass Board {\r\n  public Piece[][] boardGrid;\r\n  public BejeweledScore scoreBoard;\r\n  private int BOARD_SIZE = 8;\r\n  private int[][] walkRow = {{1,0},{-1,0}};\r\n  private int[][] walkColumn = {{0,1},{0,-1}};\r\n  public Board(){\r\n    this.boardGrid = new Piece[BOARD_SIZE][BOARD_SIZE];\r\n    this.scoreBoard = new BejeweledScore();\r\n    loadNewBoard();\r\n  }\r\n\r\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n  \/\/ Participant-defined functions\r\n  \r\n  public void swapAnyTwoPieces(int[] piece_a, int[] piece_b){\r\n      Piece temp_a = this.boardGrid[piece_a[0]][piece_a[1]];\r\n      this.boardGrid[piece_a[0]][piece_a[1]] = this.boardGrid[piece_b[0]][piece_b[1]];\r\n      this.boardGrid[piece_b[0]][piece_b[1]] = temp_a;\r\n  }\r\n\r\n  public Boolean wasSequenceCreated(){\r\n      \/\/ Left\r\n      for (int i = 2; i < 8; i++){\r\n          for (int j = 0; j < 8; j++){\r\n              if (this.boardGrid[i][j] == this.boardGrid[i-1][j]){\r\n                  if (this.boardGrid[i][j] == this.boardGrid[i-2][j]){\r\n                      return true;\r\n                  }\r\n              }\r\n          }\r\n      }\r\n      \/\/System.out.println(\"Left completed\");\r\n      \/\/ Right\r\n      for (int i = 0; i < 6; i++){\r\n          for (int j = 0; j < 8; j++){\r\n              if (this.boardGrid[i][j] == this.boardGrid[i+1][j]){\r\n                  if (this.boardGrid[i][j] == this.boardGrid[i+2][j]){\r\n                      return true;\r\n                  }\r\n              }\r\n          }\r\n      }\r\n      \/\/System.out.println(\"Right completed\");\r\n      \/\/ Up\r\n      for (int i = 0; i < 8; i++){\r\n          for (int j = 2; j < 8; j++){\r\n              if (this.boardGrid[i][j] == this.boardGrid[i][j-1]){\r\n                  if (this.boardGrid[i][j] == this.boardGrid[i][j-2]){\r\n                      return true;\r\n                  }\r\n              }\r\n          }\r\n      }\r\n      \/\/System.out.println(\"Up completed\");\r\n      \/\/ Down\r\n      for (int i = 0; i < 8; i++){\r\n          for (int j = 0; j < 6; j++){\r\n              if (this.boardGrid[i][j] == this.boardGrid[i][j+1]){\r\n                  if (this.boardGrid[i][j] == this.boardGrid[i][j+2]){\r\n                      return true;\r\n                  }\r\n              }\r\n          }\r\n      }\r\n      \/\/System.out.println(\"Down completed\");\r\n      return false;\r\n  }\r\n  \r\n  public void swapPiecesWhenAcceptable(int[] piece_a, int[] piece_b){\r\n      swapAnyTwoPieces(piece_a, piece_b);\r\n      if (!wasSequenceCreated()){\r\n          swapAnyTwoPieces(piece_a,piece_b);\r\n      } else {\r\n          \r\n      }\r\n  }\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  public Piece gemAtLocation(String piece){\r\n    int[] array_coords = getCoordinates(piece);\r\n    int y = array_coords[0];\r\n    int x = array_coords[1];\r\n    System.out.println(\"Piece at x: \" + x + \" y: \" + y);\r\n    System.out.println(\"Gem is: \" + this.boardGrid[y][x]);\r\n    return this.boardGrid[y][x];\r\n  }  \r\n\r\n  public Piece gemAtLocation(int[] piece){\r\n    int y = piece[0];\r\n    int x = piece[1];\r\n    \/\/System.out.println(\"Piece at x: \" + x + \" y: \" + y);\r\n    \/\/System.out.println(\"Gem is: \" + this.boardGrid[y][x]);\r\n    return this.boardGrid[y][x];\r\n  }\r\n\r\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n  \/\/ Swap piece functions\r\n  public Boolean swapPieces(int[] piece_a, int[] piece_b){\r\n    if (piece_a == piece_b) {\r\n      return false;\r\n    }\r\n    locationSwap(piece_a, piece_b);\r\n    if (clearSequences(piece_b, piece_a)){\r\n      return true;\r\n    }\r\n    locationSwap(piece_b, piece_a);\r\n    return false;\r\n  }\r\n  public int[] temporarilySwapAndCheckPieces(int[] piece_a, int[] piece_b){\r\n    if (piece_a == piece_b) {\r\n      return null;\r\n    }\r\n    locationSwap(piece_a, piece_b);\r\n    if (hasSequence(piece_b)){\r\n      locationSwap(piece_b, piece_a);\r\n      return piece_b;\r\n    }\r\n    if (hasSequence(piece_a)){\r\n      locationSwap(piece_b, piece_a);\r\n      return piece_a;\r\n    }\r\n    locationSwap(piece_b, piece_a);\r\n    return null;\r\n  }  \r\n  public void locationSwap(int[] piece_a, int[] piece_b){\r\n    Piece temp_a = this.boardGrid[piece_a[0]][piece_a[1]];\r\n    this.boardGrid[piece_a[0]][piece_a[1]] = this.boardGrid[piece_b[0]][piece_b[1]];\r\n    this.boardGrid[piece_b[0]][piece_b[1]] = temp_a;\r\n  }\r\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n  \r\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n  \/\/ Console\/Display functions\r\n  public void clearScreen(){\r\n    System.out.println(\"\\033[H\\033[2J\"); \/\/ Clears terminal\r\n  }\r\n  public void displayBoard(){\r\n    \/\/System.out.println(\"      You're playing Bejwelly...\");\r\n      System.out.println(\"--+---+---+---+---+---+---+---+---+\");\r\n    \/\/System.out.println(\"      Current Score: \" + this.scoreBoard.getScore());\r\n    StringBuilder topRow = new StringBuilder();\r\n    topRow.append(\"  \");\r\n    for (int i = 0; i < BOARD_SIZE; i++) {\r\n      \/\/topRow.append(\"| \" + (i + 1) + \" \");\r\n        topRow.append(\"| \" + (i) + \" \");\r\n    }\r\n    topRow.append(\"|\");\r\n    System.out.println(topRow.toString());\r\n    for (int i = 0; i < BOARD_SIZE; i++) {\r\n      StringBuilder sb = new StringBuilder();\r\n      \/\/sb.append(getCharForNumber(i + 1) + \" |\");\r\n      \/\/sb.append(i + \" |\");\r\n      sb.append(getCharForNumber(i+1) + \" |\");\r\n      for (int j = 0; j < BOARD_SIZE; j++) {\r\n        \/\/ String[] boadGrid = this.boardGrid.get(i).toArray(new String[this.boardGrid.get(i).size()]);\r\n        \/\/ System.out.println(Arrays.toString(boadGrid));\r\n        sb.append(\" \" + this.boardGrid[i][j].value + \" \");\r\n        sb.append(\"|\");\r\n      }\r\n      System.out.println(sb.toString());\r\n    }\r\n  }\r\n  public void printInstructions(){\r\n    System.out.println(\"- Instructions:\");\r\n    System.out.println(\"- For each gem greater than 3 in a chain it becomes\");\r\n    System.out.println(\"- a multiplier. e.g. a 4 gem chain means the score is multiplied\");\r\n    System.out.println(\"- by 2, 5 gem chain means score is multiplied by 3 and so on...\");\r\n    System.out.println(\"- Type HELP at any point to see this again.\");\r\n    System.out.println(\"- Type RELOAD at any point to start over.\");\r\n    System.out.println(\"- Type CHECK to see if there are still available moves.\");\r\n    System.out.println(\"- Type HINT to see an available move\");\r\n    System.out.println(\"- Type QUIT to exit.\");\r\n  }\r\n  public void promptUser(){\r\n    Console console = System.console();\r\n    String selected_piece = console.readLine(\"Which piece would you like to move? (e.g 1A) \");\r\n    if (selected_piece.contains(\"*\")){\r\n      selected_piece = selected_piece.replace(\"*\", \"\");\r\n      int[] piece_array = getCoordinates(selected_piece);\r\n      System.out.println(\"Piece at \" + selected_piece + \" is \" + this.boardGrid[piece_array[0]][piece_array[1]]);\r\n      promptUser();\r\n    }\r\n    Boolean hadKeywords = checkForKeyWords(selected_piece);\r\n    char[] input_array = selected_piece.toCharArray();\r\n    if (!isValidEntry(input_array) && !hadKeywords){\r\n      System.out.println(\"Is not a valid entry\");\r\n      promptUser();\r\n    }\r\n    String direction_input = console.readLine(\"In which direction to swap? (U,D,L,R) \");\r\n    Boolean hadDirectionKeywords = checkForKeyWords(direction_input);\r\n    if (hadDirectionKeywords){\r\n      promptUser();\r\n    }\r\n    char[] direction_input_array = direction_input.toCharArray();\r\n    int[] piece_array = getCoordinates(selected_piece);\r\n    int[] swapping_piece = getSwappingPiece(direction_input, piece_array);\r\n    if (swapping_piece != null){\r\n      int previousScore = this.scoreBoard.getScore();\r\n      Boolean did_swap = swapPieces(piece_array, swapping_piece);\r\n      if (did_swap){\r\n        clearScreen();\r\n        displayBoard();\r\n        int newScore = this.scoreBoard.getScore();\r\n        int turnScore = newScore - previousScore;\r\n        System.out.println(\"YAY! You've made a chain. \" + turnScore + \" points.\");\r\n      } else {\r\n        System.out.println(\"No chain to be had. Swapping back.\");\r\n      }\r\n      promptUser();\r\n    } else {\r\n      System.out.println(\"Is not a valid move\");\r\n      promptUser();\r\n    }\r\n  }\r\n  private Boolean checkForKeyWords(String input){\r\n      if (input.contains(\"HELP\") || input.contains(\"help\")){\r\n        clearScreen();\r\n        displayBoard();\r\n        printInstructions();\r\n        promptUser();\r\n        return true;\r\n      }\r\n      if (input.contains(\"RELOAD\") || input.contains(\"reload\")){\r\n        this.scoreBoard.resetScore();\r\n        loadNewBoard();\r\n        clearScreen();\r\n        displayBoard();\r\n        promptUser();\r\n        return true;\r\n      }\r\n      if (input.contains(\"CHECK\") || input.contains(\"check\")){\r\n        int[] checkArray = areMovesStillAvailable();\r\n        if (checkArray != null && checkArray.length > 0){\r\n          System.out.println(\"There are indeed still moves available.\");\r\n        } else {\r\n          System.out.println(\"There are no more moves available. Feel free to RELOAD.\");\r\n        }\r\n        return true;\r\n      }\r\n      if (input.contains(\"HINT\") || input.contains(\"hint\")){\r\n        int[] checkArray = areMovesStillAvailable();\r\n        if (checkArray != null && checkArray.length > 0){\r\n          System.out.println(\"A sequence can be made if \" + (checkArray[1]+1) + getCharForNumber(checkArray[0]+1) + \" is swapped\");\r\n        } else {\r\n          System.out.println(\"There are no more moves available. Feel free to RELOAD.\");\r\n        }\r\n        return true;\r\n      }\r\n      if (input.contains(\"QUIT\") || input.contains(\"quit\")){\r\n        System.exit(0);\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n  \r\n  private void loadNewBoard(){\r\n    for (int i = 0; i < BOARD_SIZE; i++) {\r\n      for (int j = 0; j < BOARD_SIZE; j++) {\r\n        addRandomPieceAtLocation(i,j);\r\n      }\r\n    }\r\n  }\r\n  protected void loadBoardTask1(){\r\n\/\/      for (int i = 0; i < BOARD_SIZE; i++) {\r\n\/\/        for (int j = 0; j < BOARD_SIZE; j++) {\r\n\/\/            addPieceToBoardTheSameWay(i,j);\r\n\/\/        }\r\n\/\/      }\r\n      Piece[] array1 = {\r\n              Piece.values()[4],\r\n              Piece.values()[3],\r\n              Piece.values()[2],\r\n              Piece.values()[7],\r\n              Piece.values()[4],\r\n              Piece.values()[1],\r\n              Piece.values()[7],\r\n              Piece.values()[2]};\r\n      this.boardGrid[0] = array1;\r\n      \r\n      Piece[] array2 = {\r\n              Piece.values()[6],\r\n              Piece.values()[4],\r\n              Piece.values()[7],\r\n              Piece.values()[7],\r\n              Piece.values()[1],\r\n              Piece.values()[5],\r\n              Piece.values()[6],\r\n              Piece.values()[2]};\r\n      this.boardGrid[1] = array2;\r\n      \r\n      Piece[] array3 = {\r\n              Piece.values()[4],\r\n              Piece.values()[1],\r\n              Piece.values()[6],\r\n              Piece.values()[2],\r\n              Piece.values()[7],\r\n              Piece.values()[3],\r\n              Piece.values()[3],\r\n              Piece.values()[7]};\r\n      this.boardGrid[2] = array3;\r\n      \r\n      Piece[] array4 = {\r\n              Piece.values()[3],\r\n              Piece.values()[1],\r\n              Piece.values()[2],\r\n              Piece.values()[5],\r\n              Piece.values()[4],\r\n              Piece.values()[3],\r\n              Piece.values()[4],\r\n              Piece.values()[7]};\r\n      this.boardGrid[3] = array4;\r\n      \r\n      Piece[] array5 = {\r\n              Piece.values()[7],\r\n              Piece.values()[5],\r\n              Piece.values()[3],\r\n              Piece.values()[1],\r\n              Piece.values()[2],\r\n              Piece.values()[6],\r\n              Piece.values()[2],\r\n              Piece.values()[4]};\r\n      this.boardGrid[4] = array5;\r\n      \r\n      Piece[] array6 = {                  \r\n              Piece.values()[4],\r\n              Piece.values()[1],\r\n              Piece.values()[6],\r\n              Piece.values()[1],\r\n              Piece.values()[1],\r\n              Piece.values()[4],\r\n              Piece.values()[3],\r\n              Piece.values()[1]\r\n      };\r\n      this.boardGrid[5] = array6;\r\n      \r\n      Piece[] array7 = {\r\n              Piece.values()[6],\r\n              Piece.values()[5],\r\n              Piece.values()[4],\r\n              Piece.values()[6],\r\n              Piece.values()[4],\r\n              Piece.values()[3],\r\n              Piece.values()[4],\r\n              Piece.values()[6]};\r\n      this.boardGrid[6] = array7;\r\n      \r\n      Piece[] array8 = {\r\n              Piece.values()[3],\r\n              Piece.values()[6],\r\n              Piece.values()[6],\r\n              Piece.values()[4],\r\n              Piece.values()[2],\r\n              Piece.values()[2],\r\n              Piece.values()[3],\r\n              Piece.values()[3]};\r\n      this.boardGrid[7] = array8;\r\n    }\r\n  private void addPieceToBoardTheSameWay(int i, int j){\r\n      Random randomPiece = new Random();\r\n      int gemInt = randomPiece.nextInt(BOARD_SIZE-1) + 1;\r\n      this.boardGrid[i][j] = Piece.values()[2];\r\n      int[] newPieceArray = {i,j};\r\n      if (hasSequence(newPieceArray)){\r\n          \/\/addPieceToBoardTheSameWay(i,j);\r\n      } else {\r\n        return;\r\n      }\r\n    }\r\n  private void addRandomPieceAtLocation(int i, int j){\r\n    Random randomPiece = new Random();\r\n    int gemInt = randomPiece.nextInt(BOARD_SIZE-1) + 1;\r\n    this.boardGrid[i][j] = Piece.values()[gemInt];\r\n    int[] newPieceArray = {i,j};\r\n    if (hasSequence(newPieceArray)){\r\n      addRandomPieceAtLocation(i,j);\r\n    } else {\r\n      return;\r\n    }\r\n  }\r\n\r\n  private Boolean hasSequence(int[] currentLocation){\r\n    HashMap<String, int[][]> resultHash = getSequences(currentLocation);\r\n    if (resultHash.get(\"row\").length > 2 || resultHash.get(\"col\").length > 2){\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  private Boolean checkAndClear(HashMap<String, int[][]> sequence){\r\n    String[] keys = {\"row\",\"col\"};\r\n    Boolean hasSufficientLength = false;\r\n    for (String key : keys){\r\n      if (sequence.get(key).length > 2 ){\r\n        for(int[] pieceAt : sequence.get(key)){\r\n          removePiece(pieceAt);\r\n        }\r\n        this.scoreBoard.addToScore(sequence.get(key).length);\r\n        if (!hasSufficientLength){\r\n          hasSufficientLength = true;\r\n        }\r\n        checkSequenceAfterRemoval(sequence.get(key));\r\n      }\r\n    }\r\n    if (hasSufficientLength){\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  private void checkSequenceAfterRemoval(int[][] sequence){\r\n    for (int[] location : sequence){\r\n      HashMap<String, int[][]> current_sequence = getSequences(location);\r\n      Boolean requiredClearing = checkAndClear(current_sequence);\r\n    }\r\n  }\r\n\r\n  private Boolean clearSequences(int[] piece_a, int[] piece_b){\r\n    HashMap<String, int[][]> pc_a_sqs = getSequences(piece_a);\r\n    HashMap<String, int[][]> pc_b_sqs = getSequences(piece_b);\r\n    Boolean a_sequences = checkAndClear(pc_a_sqs);\r\n    Boolean b_sequences = checkAndClear(pc_b_sqs);\r\n    if (a_sequences || b_sequences){\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n  \/\/ Remove\/Replace pieces\r\n  private void removePiece(int[] pieceAt)\r\n  {\r\n    this.boardGrid[pieceAt[0]][pieceAt[1]] = Piece.BLANK;\r\n    fillInGap(pieceAt);\r\n  }\r\n  private void fillInGap(int[] pieceAt)\r\n  {\r\n    if(pieceAt[0] == 0)\r\n    {\r\n      addRandomPieceAtLocation(pieceAt[0],pieceAt[1]);\r\n    }\r\n    else\r\n    {\r\n      int[] coordinatesAbove = {pieceAt[0]-1, pieceAt[1]};\r\n      Piece pieceAbove = this.boardGrid[coordinatesAbove[0]][coordinatesAbove[1]];\r\n      this.boardGrid[coordinatesAbove[0]][coordinatesAbove[1]] = Piece.BLANK;\r\n      this.boardGrid[pieceAt[0]][pieceAt[1]] = pieceAbove;\r\n      removePiece(coordinatesAbove);\r\n    }\r\n  }\r\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n  \r\n  \r\n\r\n  private int[] areMovesStillAvailable(){\r\n    String[] directions = {\"U\",\"D\",\"L\",\"R\"};\r\n    for (int i = 0; i < BOARD_SIZE; i++) {\r\n      for (int j = 0; j < BOARD_SIZE; j++) {\r\n        int[] currentLocation = {i,j};\r\n        for (String direction : directions){\r\n          int[] neighborPiece = getSwappingPiece(direction, currentLocation);\r\n          if (neighborPiece != null){\r\n            int[] pieceCanSequence = temporarilySwapAndCheckPieces(neighborPiece, currentLocation);\r\n            if (pieceCanSequence != null && pieceCanSequence.length > 0){\r\n              return currentLocation;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private int[] getSwappingPiece(String direction_input, int[] piece_array){\r\n    if (direction_input.matches(\"[a-zA-Z]\")){\r\n      char direction = Character.toUpperCase(direction_input.charAt(0));\r\n      int y = piece_array[0];\r\n      int x = piece_array[1];\r\n      \/\/ System.out.println(\"x is: \" + x + \" y: \" + y);\r\n      if (direction == 'U' && y > 0){\r\n        int[] swapping_piece = {y-1, x};\r\n        return swapping_piece;\r\n      } else if (direction == 'D' && y < BOARD_SIZE-1) {\r\n        int[] swapping_piece = {y+1, x};\r\n        return swapping_piece;\r\n      } else if (direction == 'L' && x > 0) {\r\n        int[] swapping_piece = {y, x-1};\r\n        return swapping_piece;\r\n      } else if (direction == 'R' && x < BOARD_SIZE-1) {\r\n        int[] swapping_piece = {y, x+1};\r\n        return swapping_piece;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  \r\n  \r\n  \r\n  private HashMap<String, int[][]> getSequences(int[] currentLocation){\r\n    int[][] currentSequence = {currentLocation};\r\n    HashMap<String, int[][]> directionalSequences = new HashMap<String, int[][]>();\r\n    \/\/ Check horizontal \r\n    int[][] backwardRowDirection = walkChain(currentLocation, walkRow[0]);\r\n    int[][] forwardRowDirection = walkChain(currentLocation, walkRow[1]);\r\n    int[][] currentRowSequence = BejewellyUtils.concatAll(backwardRowDirection, currentSequence, forwardRowDirection);\r\n\r\n    directionalSequences.put(\"row\", currentRowSequence);\r\n    \/\/ Check vertical\r\n    int[][] backwardColDirection = walkChain(currentLocation, walkColumn[0]);\r\n    int[][] forwardColDirection = walkChain(currentLocation, walkColumn[1]);\r\n    int[][] currentColSequence = BejewellyUtils.concatAll(backwardColDirection, currentSequence, forwardColDirection);\r\n\r\n    directionalSequences.put(\"col\", currentColSequence);\r\n\r\n    return directionalSequences;\r\n  }\r\n  \r\n  private int[][] walkChain(int[] currentLocation, int[] vector){\r\n    ArrayList<int[]> completedSequence = new ArrayList<int[]>();\r\n    return walkChain(currentLocation, vector, completedSequence);\r\n  }\r\n\r\n  private int[][] walkChain(int[] currentLocation, int[] vector, ArrayList<int[]> completedSequence){\r\n    Piece firstPiece = this.boardGrid[currentLocation[0]][currentLocation[1]];\r\n    int[] nextLocation = BejewellyUtils.addPostions(currentLocation, vector);\r\n    if (isWithinBounds(nextLocation)){\r\n      Piece nextPiece = this.boardGrid[nextLocation[0]][nextLocation[1]];\r\n      if (firstPiece == nextPiece){\r\n        completedSequence.add(nextLocation);\r\n        return walkChain(nextLocation, vector, completedSequence);\r\n      }\r\n    }\r\n    int[][] sequence = new int[completedSequence.size()][];\r\n    sequence = completedSequence.toArray(sequence);\r\n    return sequence;\r\n  }\r\n\r\n  \r\n  \r\n  private Boolean isValidEntry(char[] input_array){\r\n    if (input_array.length > 1){\r\n      String firstPosition = Character.toString(input_array[0]);\r\n      String secondPosition = Character.toString(input_array[1]);\r\n      if (firstPosition.matches(\"[1-\"+BOARD_SIZE+\"]\") && secondPosition.matches(\"[a-hA-H]\")){\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  private int[] getCoordinates(String selected_piece){\r\n    int x = Character.getNumericValue(selected_piece.charAt(0))-1;\r\n    int y = getNumberForCharacter(Character.toUpperCase(selected_piece.charAt(1)))-1;\r\n    int[] coordinate_array = {y,x};\r\n    return coordinate_array;\r\n  }\r\n\r\n  private Boolean isWithinBounds(int[] piece_array){\r\n    int y = piece_array[0];\r\n    int x = piece_array[1];\r\n    if (y >= 0 && y <= BOARD_SIZE-1 && x >= 0 && x <= BOARD_SIZE-1){\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  \r\n\r\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n  \/\/ Utility functions\r\n  private String getCharForNumber(int i) {\r\n    return i > 0 && i < 27 ? String.valueOf((char)(i + 64)) : null;\r\n  }\r\n\r\n  private int getNumberForCharacter(char value) {\r\n    return (int)value-64;\r\n  }\r\n\r\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n}\r\n\r\n","entityAddress":"\/EclipseBejewllyProject\/src\/Board.java","IDE":"eclipse","eventType":"resourceAdded"}
$@${"timestamp":"1391991211","text":"\npublic class Validation {\n\n\tpublic boolean checkTask1(Board gameBoard) {\n\t\tint[] testLoc1 = {3,2};\n\t\tint[] testLoc2 = {4,2};\n\t\tif(gameBoard.gemAtLocation(testLoc1).ordinal() == 2){\n\t\t\tif(gameBoard.gemAtLocation(testLoc2).ordinal() == 3){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\t\n\tpublic boolean checkTask2(Board gameBoard) {\n\t\treturn gameBoard.wasSequenceCreated();\n\t}\n\t\n\tpublic boolean checkTask3(Board gameBoard) {\n\t\treturn false;\n\t}\n\n\tpublic boolean checkTask3Valid(Board gameBoard) {\n\t\tint[] testLoc1 = {3,2};\n\t\tint[] testLoc2 = {4,2};\n\t\tif(gameBoard.gemAtLocation(testLoc1).ordinal() == 2){\n\t\t\tif(gameBoard.gemAtLocation(testLoc2).ordinal() == 3){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic boolean checkTask3Invalid(Board gameBoard) {\n\t\tint[] testLoc1 = {3,2};\n\t\tint[] testLoc2 = {2,2};\n\t\tif(gameBoard.gemAtLocation(testLoc1).ordinal() == 2){\n\t\t\tif(gameBoard.gemAtLocation(testLoc2).ordinal() == 6){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n}\n","entityAddress":"\/EclipseBejewllyProject\/src\/Validation.java","IDE":"eclipse","eventType":"resourceAdded"}
$@${"timestamp":"1391991211","text":"\nenum Piece\n{\n  BLANK(\" \"), STAR(\"*\"), UMBRELLA(\"^\"), SUN(\"O\"), DIAMOND(\"&\"), HEART(\"@\"), SPADE(\"$\"), CLUB(\"}\");\n  public String value;\n  private Piece(String value){\n    this.value = value;\n  }\n}\n\npublic class Bejewelly {\n  public static void main(String[] args) {\n    Validation val = new Validation();\n    System.out.println(\"************** TASK1 **************\");\n    System.out.println(\"********* Swap C3 with C4 *********\");\n    System.out.println(\"***********************************\");  \n    Board gameBoard = new Board();\n    gameBoard.loadBoardTask1();\n    System.out.println(\"\");\n    System.out.println(\"********** Before Swap ************\");\n    gameBoard.displayBoard();\n    int[] piece_a = {2,3};\n    int[] piece_b = {2,4};\n   \n\n    \/\/FUNCTION TO SWAP ANY TWO PICES.  THIS MUST BE IMPLEMENTED IN BOARD.JAVA\n    gameBoard.swapAnyTwoPieces(piece_a,piece_b);\n    \/\/TODO REMOVE THIS FUNCTION ALSO\n    \/\/gameBoard.locationSwap(piece_a,piece_b);\n    \n    System.out.println(\"\");\n    System.out.println(\"*********** After Swap ************\");\n    gameBoard.displayBoard();\n    \n    System.out.println(\"\");\n    \n    System.out.println(\"******* Was Swap Performed? *******\");\n    System.out.println(\"SEQUENCE CREATED: \" + val.checkTask1(gameBoard));\n    System.out.println(\"\");\n    boolean task1done = val.checkTask1(gameBoard);\n    if(task1done){\n    \tSystem.out.println(\"TASK 1: [DONE]\");\n    }else{\n    \tSystem.out.println(\"TASK 1: [INCOMPLETE]\");\n    }\n    \/\/ String Task1_Result = checkTask1;\n    \/\/System.out.println(\"TASK 1: [INCOMPLETE]\");\n    System.out.println(\"\");\n    \n    System.out.println(\"************** TASK2 **************\");\n    System.out.println(\"****** Swap Created Sequence ******\");\n    System.out.println(\"***********************************\");  \n    Board gameBoard2 = new Board();\n    gameBoard2.loadBoardTask1();\n    gameBoard.displayBoard();\n    System.out.println(\"\");\n    System.out.println(\"****** Was Sequence Created? ******\");\n    System.out.println(\"SEQUENCE CREATED: \" + gameBoard.wasSequenceCreated());\n    boolean task2done = val.checkTask2(gameBoard);\n    System.out.println(\"\");\n    if(task2done){\n    \tSystem.out.println(\"TASK 2: [DONE]\");\n    }else{\n    \tSystem.out.println(\"TASK 2: [INCOMPLETE]\");\n    }\n    System.out.println(\"\");\n\n    System.out.println(\"************** TASK3 **************\");\n    System.out.println(\"** Swap Only if Sequence Created **\");\n    System.out.println(\"***********************************\"); \n    \n    System.out.println(\"******* Before Valid Swap *********\");\n    gameBoard.loadBoardTask1();\n    gameBoard.displayBoard();\n    System.out.println();\n    System.out.println(\"** Perform Valid Swap [C3 to C4] **\");\n    System.out.println();\n    \n    int[] piece_valid_a = {2,3};\n    int[] piece_valid_b = {2,4};\n    gameBoard.swapPiecesWhenAcceptable(piece_valid_a,piece_valid_b);\n    gameBoard.displayBoard();\n    System.out.println();\n    System.out.println(\"********* Did Swap Occur? *********\");\n    boolean checkTask3Valid = val.checkTask3Valid(gameBoard);\n    System.out.println(\"Swap Occured: \" + checkTask3Valid);\n    \n    System.out.println();\n    System.out.println(\"****** Before Invalid Swap ********\");\n    gameBoard.loadBoardTask1();\n    gameBoard.displayBoard();\n    System.out.println();\n    System.out.println(\"* Attempt Invalid Swap [C2 to C3] *\");\n    System.out.println();\n    \n    int[] piece_invalid_a = {2,2};\n    int[] piece_invalid_b = {2,3};\n    gameBoard.swapPiecesWhenAcceptable(piece_invalid_a,piece_invalid_b);\n    gameBoard.displayBoard();\n    System.out.println();\n    System.out.println(\"********* Did Swap Occur? *********\");\n    boolean checkTask3Invalid = val.checkTask3Invalid(gameBoard);\n\tSystem.out.println(\"Swap was NOT performed: \" + checkTask3Invalid);\n    System.out.println(\"\");\n    if(checkTask3Valid && checkTask3Invalid){\n    \tSystem.out.println(\"TASK 3: [DONE]\");\n    }else{\n    \tSystem.out.println(\"TASK 3: [INCOMPLETE]\");\n    }\n    System.out.println(\"\");\n    \n    \/*\n    int[] p1 = new int[2];\n    int[] p2 = new int[2];\n    p1[0] = 1;\n    p1[1] = 0;\n    p2[0] = 1;\n    p2[1] = 1;\n    System.out.println(\"Swapping [\" + p1[0] + \",\" + p1[1] + \"] and [\"+ p2[0] + \",\" + p2[1] + \"]\");\n    gameBoard.swapAnyTwoPieces(p1, p2);\n    gameBoard.displayBoard();\n    System.out.println(\"A sequence should have been created.\");\n    System.out.println(\"T or F: A sequence was created: \" + gameBoard.wasSequenceCreated());\n    gameBoard.swapAnyTwoPieces(p1, p2); \n    gameBoard.displayBoard();\n    System.out.println(\"When returned to an original state, there should be no sequence.\");\n    System.out.println(\"T or F: A sequence was created: \" + gameBoard.wasSequenceCreated());\n   \n    \n    System.out.println(\"Can you avoid swapping when a sequence is not created?\");\n    p2[0] = 0;\n    p2[1] = 0;\n    gameBoard.swapPiecesWhenAcceptable(p1, p2);\n    gameBoard.displayBoard();\n    System.out.println(\"Does that same function swap when it is acceptable?\");\n    p2[0] = 1;\n    p2[1] = 1;\n    gameBoard.swapPiecesWhenAcceptable(p1, p2);\n    gameBoard.displayBoard();\n    \n    \/\/ability to swap two elements (one game move)\n    \/\/upon swapping, check for matches\n    \/\/if a match occurs, delete the elements that match, add new pieces to the board\n    \/\/implement a scoring algorithm\n    \n    \/\/ swap any two elements\n    \n    \/\/ check if a sequence is created\n    \/\/ swap back if no sequence is created\n*\/\n  }\n}","entityAddress":"\/EclipseBejewllyProject\/src\/Bejewelly.java","IDE":"eclipse","eventType":"refresh"}
$@${"timestamp":"1391991211","text":"import java.util.Arrays;\r\n\r\nclass BejewellyUtils {\r\n\r\n  public static int[] concatAll(int[] first, int[]... rest) {\r\n    int totalLength = first.length;\r\n    for (int[] array : rest) {\r\n      totalLength += array.length;\r\n    }\r\n    int[] result = Arrays.copyOf(first, totalLength);\r\n    int offset = first.length;\r\n    for (int[] array : rest) {\r\n      System.arraycopy(array, 0, result, offset, array.length);\r\n      offset += array.length;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  public static int[][] concatAll(int[][] first, int[][]... rest) {\r\n    int totalLength = first.length;\r\n    for (int[][] array : rest) {\r\n      totalLength += array.length;\r\n    }\r\n    int[][] result = Arrays.copyOf(first, totalLength);\r\n    int offset = first.length;\r\n    for (int[][] array : rest) {\r\n      System.arraycopy(array, 0, result, offset, array.length);\r\n      offset += array.length;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  public static <T> T[] concatAll(T[] first, T[]... rest) {\r\n    int totalLength = first.length;\r\n    for (T[] array : rest) {\r\n      totalLength += array.length;\r\n    }\r\n    T[] result = Arrays.copyOf(first, totalLength);\r\n    int offset = first.length;\r\n    for (T[] array : rest) {\r\n      System.arraycopy(array, 0, result, offset, array.length);\r\n      offset += array.length;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  public static int[] joinArrays(int[] x, int[] y) {\r\n    int[] arr = new int[x.length + y.length];\r\n    System.arraycopy(x, 0, arr, 0, x.length);\r\n    System.arraycopy(y, 0, arr, x.length, y.length);\r\n    return arr;\r\n  }\r\n\r\n  public static int[] addPostions(int[] x, int[] y){  \r\n    int[] sequence = new int[x.length];\r\n    for(int i = x.length-1; i >= 0; i--){ \r\n       int addResult = y[i] + x[i];  \r\n       sequence[i] = addResult;\r\n    }\r\n    return sequence;\r\n  }  \r\n}","entityAddress":"\/EclipseBejewllyProject\/src\/BejewellyUtils.java","IDE":"eclipse","eventType":"refresh"}
$@${"timestamp":"1391991211","text":"import java.io.Console;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.Random;\r\n\r\n\r\nclass Board {\r\n  public Piece[][] boardGrid;\r\n  public BejeweledScore scoreBoard;\r\n  private int BOARD_SIZE = 8;\r\n  private int[][] walkRow = {{1,0},{-1,0}};\r\n  private int[][] walkColumn = {{0,1},{0,-1}};\r\n  public Board(){\r\n    this.boardGrid = new Piece[BOARD_SIZE][BOARD_SIZE];\r\n    this.scoreBoard = new BejeweledScore();\r\n    loadNewBoard();\r\n  }\r\n\r\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n  \/\/ Participant-defined functions\r\n  \r\n  public void swapAnyTwoPieces(int[] piece_a, int[] piece_b){\r\n      Piece temp_a = this.boardGrid[piece_a[0]][piece_a[1]];\r\n      this.boardGrid[piece_a[0]][piece_a[1]] = this.boardGrid[piece_b[0]][piece_b[1]];\r\n      this.boardGrid[piece_b[0]][piece_b[1]] = temp_a;\r\n  }\r\n\r\n  public Boolean wasSequenceCreated(){\r\n      \/\/ Left\r\n      for (int i = 2; i < 8; i++){\r\n          for (int j = 0; j < 8; j++){\r\n              if (this.boardGrid[i][j] == this.boardGrid[i-1][j]){\r\n                  if (this.boardGrid[i][j] == this.boardGrid[i-2][j]){\r\n                      return true;\r\n                  }\r\n              }\r\n          }\r\n      }\r\n      \/\/System.out.println(\"Left completed\");\r\n      \/\/ Right\r\n      for (int i = 0; i < 6; i++){\r\n          for (int j = 0; j < 8; j++){\r\n              if (this.boardGrid[i][j] == this.boardGrid[i+1][j]){\r\n                  if (this.boardGrid[i][j] == this.boardGrid[i+2][j]){\r\n                      return true;\r\n                  }\r\n              }\r\n          }\r\n      }\r\n      \/\/System.out.println(\"Right completed\");\r\n      \/\/ Up\r\n      for (int i = 0; i < 8; i++){\r\n          for (int j = 2; j < 8; j++){\r\n              if (this.boardGrid[i][j] == this.boardGrid[i][j-1]){\r\n                  if (this.boardGrid[i][j] == this.boardGrid[i][j-2]){\r\n                      return true;\r\n                  }\r\n              }\r\n          }\r\n      }\r\n      \/\/System.out.println(\"Up completed\");\r\n      \/\/ Down\r\n      for (int i = 0; i < 8; i++){\r\n          for (int j = 0; j < 6; j++){\r\n              if (this.boardGrid[i][j] == this.boardGrid[i][j+1]){\r\n                  if (this.boardGrid[i][j] == this.boardGrid[i][j+2]){\r\n                      return true;\r\n                  }\r\n              }\r\n          }\r\n      }\r\n      \/\/System.out.println(\"Down completed\");\r\n      return false;\r\n  }\r\n  \r\n  public void swapPiecesWhenAcceptable(int[] piece_a, int[] piece_b){\r\n      swapAnyTwoPieces(piece_a, piece_b);\r\n      if (!wasSequenceCreated()){\r\n          swapAnyTwoPieces(piece_a,piece_b);\r\n      } else {\r\n          \r\n      }\r\n  }\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  public Piece gemAtLocation(String piece){\r\n    int[] array_coords = getCoordinates(piece);\r\n    int y = array_coords[0];\r\n    int x = array_coords[1];\r\n    System.out.println(\"Piece at x: \" + x + \" y: \" + y);\r\n    System.out.println(\"Gem is: \" + this.boardGrid[y][x]);\r\n    return this.boardGrid[y][x];\r\n  }  \r\n\r\n  public Piece gemAtLocation(int[] piece){\r\n    int y = piece[0];\r\n    int x = piece[1];\r\n    \/\/System.out.println(\"Piece at x: \" + x + \" y: \" + y);\r\n    \/\/System.out.println(\"Gem is: \" + this.boardGrid[y][x]);\r\n    return this.boardGrid[y][x];\r\n  }\r\n\r\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n  \/\/ Swap piece functions\r\n  public Boolean swapPieces(int[] piece_a, int[] piece_b){\r\n    if (piece_a == piece_b) {\r\n      return false;\r\n    }\r\n    locationSwap(piece_a, piece_b);\r\n    if (clearSequences(piece_b, piece_a)){\r\n      return true;\r\n    }\r\n    locationSwap(piece_b, piece_a);\r\n    return false;\r\n  }\r\n  public int[] temporarilySwapAndCheckPieces(int[] piece_a, int[] piece_b){\r\n    if (piece_a == piece_b) {\r\n      return null;\r\n    }\r\n    locationSwap(piece_a, piece_b);\r\n    if (hasSequence(piece_b)){\r\n      locationSwap(piece_b, piece_a);\r\n      return piece_b;\r\n    }\r\n    if (hasSequence(piece_a)){\r\n      locationSwap(piece_b, piece_a);\r\n      return piece_a;\r\n    }\r\n    locationSwap(piece_b, piece_a);\r\n    return null;\r\n  }  \r\n  public void locationSwap(int[] piece_a, int[] piece_b){\r\n    Piece temp_a = this.boardGrid[piece_a[0]][piece_a[1]];\r\n    this.boardGrid[piece_a[0]][piece_a[1]] = this.boardGrid[piece_b[0]][piece_b[1]];\r\n    this.boardGrid[piece_b[0]][piece_b[1]] = temp_a;\r\n  }\r\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n  \r\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n  \/\/ Console\/Display functions\r\n  public void clearScreen(){\r\n    System.out.println(\"\\033[H\\033[2J\"); \/\/ Clears terminal\r\n  }\r\n  public void displayBoard(){\r\n    \/\/System.out.println(\"      You're playing Bejwelly...\");\r\n      System.out.println(\"--+---+---+---+---+---+---+---+---+\");\r\n    \/\/System.out.println(\"      Current Score: \" + this.scoreBoard.getScore());\r\n    StringBuilder topRow = new StringBuilder();\r\n    topRow.append(\"  \");\r\n    for (int i = 0; i < BOARD_SIZE; i++) {\r\n      \/\/topRow.append(\"| \" + (i + 1) + \" \");\r\n        topRow.append(\"| \" + (i) + \" \");\r\n    }\r\n    topRow.append(\"|\");\r\n    System.out.println(topRow.toString());\r\n    for (int i = 0; i < BOARD_SIZE; i++) {\r\n      StringBuilder sb = new StringBuilder();\r\n      \/\/sb.append(getCharForNumber(i + 1) + \" |\");\r\n      \/\/sb.append(i + \" |\");\r\n      sb.append(getCharForNumber(i+1) + \" |\");\r\n      for (int j = 0; j < BOARD_SIZE; j++) {\r\n        \/\/ String[] boadGrid = this.boardGrid.get(i).toArray(new String[this.boardGrid.get(i).size()]);\r\n        \/\/ System.out.println(Arrays.toString(boadGrid));\r\n        sb.append(\" \" + this.boardGrid[i][j].value + \" \");\r\n        sb.append(\"|\");\r\n      }\r\n      System.out.println(sb.toString());\r\n    }\r\n  }\r\n  public void printInstructions(){\r\n    System.out.println(\"- Instructions:\");\r\n    System.out.println(\"- For each gem greater than 3 in a chain it becomes\");\r\n    System.out.println(\"- a multiplier. e.g. a 4 gem chain means the score is multiplied\");\r\n    System.out.println(\"- by 2, 5 gem chain means score is multiplied by 3 and so on...\");\r\n    System.out.println(\"- Type HELP at any point to see this again.\");\r\n    System.out.println(\"- Type RELOAD at any point to start over.\");\r\n    System.out.println(\"- Type CHECK to see if there are still available moves.\");\r\n    System.out.println(\"- Type HINT to see an available move\");\r\n    System.out.println(\"- Type QUIT to exit.\");\r\n  }\r\n  public void promptUser(){\r\n    Console console = System.console();\r\n    String selected_piece = console.readLine(\"Which piece would you like to move? (e.g 1A) \");\r\n    if (selected_piece.contains(\"*\")){\r\n      selected_piece = selected_piece.replace(\"*\", \"\");\r\n      int[] piece_array = getCoordinates(selected_piece);\r\n      System.out.println(\"Piece at \" + selected_piece + \" is \" + this.boardGrid[piece_array[0]][piece_array[1]]);\r\n      promptUser();\r\n    }\r\n    Boolean hadKeywords = checkForKeyWords(selected_piece);\r\n    char[] input_array = selected_piece.toCharArray();\r\n    if (!isValidEntry(input_array) && !hadKeywords){\r\n      System.out.println(\"Is not a valid entry\");\r\n      promptUser();\r\n    }\r\n    String direction_input = console.readLine(\"In which direction to swap? (U,D,L,R) \");\r\n    Boolean hadDirectionKeywords = checkForKeyWords(direction_input);\r\n    if (hadDirectionKeywords){\r\n      promptUser();\r\n    }\r\n    char[] direction_input_array = direction_input.toCharArray();\r\n    int[] piece_array = getCoordinates(selected_piece);\r\n    int[] swapping_piece = getSwappingPiece(direction_input, piece_array);\r\n    if (swapping_piece != null){\r\n      int previousScore = this.scoreBoard.getScore();\r\n      Boolean did_swap = swapPieces(piece_array, swapping_piece);\r\n      if (did_swap){\r\n        clearScreen();\r\n        displayBoard();\r\n        int newScore = this.scoreBoard.getScore();\r\n        int turnScore = newScore - previousScore;\r\n        System.out.println(\"YAY! You've made a chain. \" + turnScore + \" points.\");\r\n      } else {\r\n        System.out.println(\"No chain to be had. Swapping back.\");\r\n      }\r\n      promptUser();\r\n    } else {\r\n      System.out.println(\"Is not a valid move\");\r\n      promptUser();\r\n    }\r\n  }\r\n  private Boolean checkForKeyWords(String input){\r\n      if (input.contains(\"HELP\") || input.contains(\"help\")){\r\n        clearScreen();\r\n        displayBoard();\r\n        printInstructions();\r\n        promptUser();\r\n        return true;\r\n      }\r\n      if (input.contains(\"RELOAD\") || input.contains(\"reload\")){\r\n        this.scoreBoard.resetScore();\r\n        loadNewBoard();\r\n        clearScreen();\r\n        displayBoard();\r\n        promptUser();\r\n        return true;\r\n      }\r\n      if (input.contains(\"CHECK\") || input.contains(\"check\")){\r\n        int[] checkArray = areMovesStillAvailable();\r\n        if (checkArray != null && checkArray.length > 0){\r\n          System.out.println(\"There are indeed still moves available.\");\r\n        } else {\r\n          System.out.println(\"There are no more moves available. Feel free to RELOAD.\");\r\n        }\r\n        return true;\r\n      }\r\n      if (input.contains(\"HINT\") || input.contains(\"hint\")){\r\n        int[] checkArray = areMovesStillAvailable();\r\n        if (checkArray != null && checkArray.length > 0){\r\n          System.out.println(\"A sequence can be made if \" + (checkArray[1]+1) + getCharForNumber(checkArray[0]+1) + \" is swapped\");\r\n        } else {\r\n          System.out.println(\"There are no more moves available. Feel free to RELOAD.\");\r\n        }\r\n        return true;\r\n      }\r\n      if (input.contains(\"QUIT\") || input.contains(\"quit\")){\r\n        System.exit(0);\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n  \r\n  private void loadNewBoard(){\r\n    for (int i = 0; i < BOARD_SIZE; i++) {\r\n      for (int j = 0; j < BOARD_SIZE; j++) {\r\n        addRandomPieceAtLocation(i,j);\r\n      }\r\n    }\r\n  }\r\n  protected void loadBoardTask1(){\r\n\/\/      for (int i = 0; i < BOARD_SIZE; i++) {\r\n\/\/        for (int j = 0; j < BOARD_SIZE; j++) {\r\n\/\/            addPieceToBoardTheSameWay(i,j);\r\n\/\/        }\r\n\/\/      }\r\n      Piece[] array1 = {\r\n              Piece.values()[4],\r\n              Piece.values()[3],\r\n              Piece.values()[2],\r\n              Piece.values()[7],\r\n              Piece.values()[4],\r\n              Piece.values()[1],\r\n              Piece.values()[7],\r\n              Piece.values()[2]};\r\n      this.boardGrid[0] = array1;\r\n      \r\n      Piece[] array2 = {\r\n              Piece.values()[6],\r\n              Piece.values()[4],\r\n              Piece.values()[7],\r\n              Piece.values()[7],\r\n              Piece.values()[1],\r\n              Piece.values()[5],\r\n              Piece.values()[6],\r\n              Piece.values()[2]};\r\n      this.boardGrid[1] = array2;\r\n      \r\n      Piece[] array3 = {\r\n              Piece.values()[4],\r\n              Piece.values()[1],\r\n              Piece.values()[6],\r\n              Piece.values()[2],\r\n              Piece.values()[7],\r\n              Piece.values()[3],\r\n              Piece.values()[3],\r\n              Piece.values()[7]};\r\n      this.boardGrid[2] = array3;\r\n      \r\n      Piece[] array4 = {\r\n              Piece.values()[3],\r\n              Piece.values()[1],\r\n              Piece.values()[2],\r\n              Piece.values()[5],\r\n              Piece.values()[4],\r\n              Piece.values()[3],\r\n              Piece.values()[4],\r\n              Piece.values()[7]};\r\n      this.boardGrid[3] = array4;\r\n      \r\n      Piece[] array5 = {\r\n              Piece.values()[7],\r\n              Piece.values()[5],\r\n              Piece.values()[3],\r\n              Piece.values()[1],\r\n              Piece.values()[2],\r\n              Piece.values()[6],\r\n              Piece.values()[2],\r\n              Piece.values()[4]};\r\n      this.boardGrid[4] = array5;\r\n      \r\n      Piece[] array6 = {                  \r\n              Piece.values()[4],\r\n              Piece.values()[1],\r\n              Piece.values()[6],\r\n              Piece.values()[1],\r\n              Piece.values()[1],\r\n              Piece.values()[4],\r\n              Piece.values()[3],\r\n              Piece.values()[1]\r\n      };\r\n      this.boardGrid[5] = array6;\r\n      \r\n      Piece[] array7 = {\r\n              Piece.values()[6],\r\n              Piece.values()[5],\r\n              Piece.values()[4],\r\n              Piece.values()[6],\r\n              Piece.values()[4],\r\n              Piece.values()[3],\r\n              Piece.values()[4],\r\n              Piece.values()[6]};\r\n      this.boardGrid[6] = array7;\r\n      \r\n      Piece[] array8 = {\r\n              Piece.values()[3],\r\n              Piece.values()[6],\r\n              Piece.values()[6],\r\n              Piece.values()[4],\r\n              Piece.values()[2],\r\n              Piece.values()[2],\r\n              Piece.values()[3],\r\n              Piece.values()[3]};\r\n      this.boardGrid[7] = array8;\r\n    }\r\n  private void addPieceToBoardTheSameWay(int i, int j){\r\n      Random randomPiece = new Random();\r\n      int gemInt = randomPiece.nextInt(BOARD_SIZE-1) + 1;\r\n      this.boardGrid[i][j] = Piece.values()[2];\r\n      int[] newPieceArray = {i,j};\r\n      if (hasSequence(newPieceArray)){\r\n          \/\/addPieceToBoardTheSameWay(i,j);\r\n      } else {\r\n        return;\r\n      }\r\n    }\r\n  private void addRandomPieceAtLocation(int i, int j){\r\n    Random randomPiece = new Random();\r\n    int gemInt = randomPiece.nextInt(BOARD_SIZE-1) + 1;\r\n    this.boardGrid[i][j] = Piece.values()[gemInt];\r\n    int[] newPieceArray = {i,j};\r\n    if (hasSequence(newPieceArray)){\r\n      addRandomPieceAtLocation(i,j);\r\n    } else {\r\n      return;\r\n    }\r\n  }\r\n\r\n  private Boolean hasSequence(int[] currentLocation){\r\n    HashMap<String, int[][]> resultHash = getSequences(currentLocation);\r\n    if (resultHash.get(\"row\").length > 2 || resultHash.get(\"col\").length > 2){\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  private Boolean checkAndClear(HashMap<String, int[][]> sequence){\r\n    String[] keys = {\"row\",\"col\"};\r\n    Boolean hasSufficientLength = false;\r\n    for (String key : keys){\r\n      if (sequence.get(key).length > 2 ){\r\n        for(int[] pieceAt : sequence.get(key)){\r\n          removePiece(pieceAt);\r\n        }\r\n        this.scoreBoard.addToScore(sequence.get(key).length);\r\n        if (!hasSufficientLength){\r\n          hasSufficientLength = true;\r\n        }\r\n        checkSequenceAfterRemoval(sequence.get(key));\r\n      }\r\n    }\r\n    if (hasSufficientLength){\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  private void checkSequenceAfterRemoval(int[][] sequence){\r\n    for (int[] location : sequence){\r\n      HashMap<String, int[][]> current_sequence = getSequences(location);\r\n      Boolean requiredClearing = checkAndClear(current_sequence);\r\n    }\r\n  }\r\n\r\n  private Boolean clearSequences(int[] piece_a, int[] piece_b){\r\n    HashMap<String, int[][]> pc_a_sqs = getSequences(piece_a);\r\n    HashMap<String, int[][]> pc_b_sqs = getSequences(piece_b);\r\n    Boolean a_sequences = checkAndClear(pc_a_sqs);\r\n    Boolean b_sequences = checkAndClear(pc_b_sqs);\r\n    if (a_sequences || b_sequences){\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n  \/\/ Remove\/Replace pieces\r\n  private void removePiece(int[] pieceAt)\r\n  {\r\n    this.boardGrid[pieceAt[0]][pieceAt[1]] = Piece.BLANK;\r\n    fillInGap(pieceAt);\r\n  }\r\n  private void fillInGap(int[] pieceAt)\r\n  {\r\n    if(pieceAt[0] == 0)\r\n    {\r\n      addRandomPieceAtLocation(pieceAt[0],pieceAt[1]);\r\n    }\r\n    else\r\n    {\r\n      int[] coordinatesAbove = {pieceAt[0]-1, pieceAt[1]};\r\n      Piece pieceAbove = this.boardGrid[coordinatesAbove[0]][coordinatesAbove[1]];\r\n      this.boardGrid[coordinatesAbove[0]][coordinatesAbove[1]] = Piece.BLANK;\r\n      this.boardGrid[pieceAt[0]][pieceAt[1]] = pieceAbove;\r\n      removePiece(coordinatesAbove);\r\n    }\r\n  }\r\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n  \r\n  \r\n\r\n  private int[] areMovesStillAvailable(){\r\n    String[] directions = {\"U\",\"D\",\"L\",\"R\"};\r\n    for (int i = 0; i < BOARD_SIZE; i++) {\r\n      for (int j = 0; j < BOARD_SIZE; j++) {\r\n        int[] currentLocation = {i,j};\r\n        for (String direction : directions){\r\n          int[] neighborPiece = getSwappingPiece(direction, currentLocation);\r\n          if (neighborPiece != null){\r\n            int[] pieceCanSequence = temporarilySwapAndCheckPieces(neighborPiece, currentLocation);\r\n            if (pieceCanSequence != null && pieceCanSequence.length > 0){\r\n              return currentLocation;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private int[] getSwappingPiece(String direction_input, int[] piece_array){\r\n    if (direction_input.matches(\"[a-zA-Z]\")){\r\n      char direction = Character.toUpperCase(direction_input.charAt(0));\r\n      int y = piece_array[0];\r\n      int x = piece_array[1];\r\n      \/\/ System.out.println(\"x is: \" + x + \" y: \" + y);\r\n      if (direction == 'U' && y > 0){\r\n        int[] swapping_piece = {y-1, x};\r\n        return swapping_piece;\r\n      } else if (direction == 'D' && y < BOARD_SIZE-1) {\r\n        int[] swapping_piece = {y+1, x};\r\n        return swapping_piece;\r\n      } else if (direction == 'L' && x > 0) {\r\n        int[] swapping_piece = {y, x-1};\r\n        return swapping_piece;\r\n      } else if (direction == 'R' && x < BOARD_SIZE-1) {\r\n        int[] swapping_piece = {y, x+1};\r\n        return swapping_piece;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  \r\n  \r\n  \r\n  private HashMap<String, int[][]> getSequences(int[] currentLocation){\r\n    int[][] currentSequence = {currentLocation};\r\n    HashMap<String, int[][]> directionalSequences = new HashMap<String, int[][]>();\r\n    \/\/ Check horizontal \r\n    int[][] backwardRowDirection = walkChain(currentLocation, walkRow[0]);\r\n    int[][] forwardRowDirection = walkChain(currentLocation, walkRow[1]);\r\n    int[][] currentRowSequence = BejewellyUtils.concatAll(backwardRowDirection, currentSequence, forwardRowDirection);\r\n\r\n    directionalSequences.put(\"row\", currentRowSequence);\r\n    \/\/ Check vertical\r\n    int[][] backwardColDirection = walkChain(currentLocation, walkColumn[0]);\r\n    int[][] forwardColDirection = walkChain(currentLocation, walkColumn[1]);\r\n    int[][] currentColSequence = BejewellyUtils.concatAll(backwardColDirection, currentSequence, forwardColDirection);\r\n\r\n    directionalSequences.put(\"col\", currentColSequence);\r\n\r\n    return directionalSequences;\r\n  }\r\n  \r\n  private int[][] walkChain(int[] currentLocation, int[] vector){\r\n    ArrayList<int[]> completedSequence = new ArrayList<int[]>();\r\n    return walkChain(currentLocation, vector, completedSequence);\r\n  }\r\n\r\n  private int[][] walkChain(int[] currentLocation, int[] vector, ArrayList<int[]> completedSequence){\r\n    Piece firstPiece = this.boardGrid[currentLocation[0]][currentLocation[1]];\r\n    int[] nextLocation = BejewellyUtils.addPostions(currentLocation, vector);\r\n    if (isWithinBounds(nextLocation)){\r\n      Piece nextPiece = this.boardGrid[nextLocation[0]][nextLocation[1]];\r\n      if (firstPiece == nextPiece){\r\n        completedSequence.add(nextLocation);\r\n        return walkChain(nextLocation, vector, completedSequence);\r\n      }\r\n    }\r\n    int[][] sequence = new int[completedSequence.size()][];\r\n    sequence = completedSequence.toArray(sequence);\r\n    return sequence;\r\n  }\r\n\r\n  \r\n  \r\n  private Boolean isValidEntry(char[] input_array){\r\n    if (input_array.length > 1){\r\n      String firstPosition = Character.toString(input_array[0]);\r\n      String secondPosition = Character.toString(input_array[1]);\r\n      if (firstPosition.matches(\"[1-\"+BOARD_SIZE+\"]\") && secondPosition.matches(\"[a-hA-H]\")){\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  private int[] getCoordinates(String selected_piece){\r\n    int x = Character.getNumericValue(selected_piece.charAt(0))-1;\r\n    int y = getNumberForCharacter(Character.toUpperCase(selected_piece.charAt(1)))-1;\r\n    int[] coordinate_array = {y,x};\r\n    return coordinate_array;\r\n  }\r\n\r\n  private Boolean isWithinBounds(int[] piece_array){\r\n    int y = piece_array[0];\r\n    int x = piece_array[1];\r\n    if (y >= 0 && y <= BOARD_SIZE-1 && x >= 0 && x <= BOARD_SIZE-1){\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  \r\n\r\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n  \/\/ Utility functions\r\n  private String getCharForNumber(int i) {\r\n    return i > 0 && i < 27 ? String.valueOf((char)(i + 64)) : null;\r\n  }\r\n\r\n  private int getNumberForCharacter(char value) {\r\n    return (int)value-64;\r\n  }\r\n\r\n  \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n}\r\n\r\n","entityAddress":"\/EclipseBejewllyProject\/src\/Board.java","IDE":"eclipse","eventType":"refresh"}
$@${"timestamp":"1391991214","entityAddress":"\/EclipseBejewllyProject\/src\/BejeweledScore.java","IDE":"eclipse","eventType":"fileOpen"}
$@${"timestamp":"1391991214","entityAddress":"\/Users\/michaelhilton\/Development\/bejeweled_Experiment\/.metadata\/.plugins\/edu.oregonstate.cope.eclipse\/EclipseBejewllyProject-1391991214120.zip","IDE":"eclipse","eventType":"snapshot"}
$@${"launchTimestamp":"1391991218708","launchName":"Bejewelly","timestamp":"1391991218","launchFile":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<launchConfiguration type=\"org.eclipse.jdt.launching.localJavaApplication\">\n<listAttribute key=\"org.eclipse.debug.core.MAPPED_RESOURCE_PATHS\">\n<listEntry value=\"\/EclipseBejewllyProject\/src\/Bejewelly.java\"\/>\n<\/listAttribute>\n<listAttribute key=\"org.eclipse.debug.core.MAPPED_RESOURCE_TYPES\">\n<listEntry value=\"1\"\/>\n<\/listAttribute>\n<stringAttribute key=\"org.eclipse.jdt.launching.MAIN_TYPE\" value=\"Bejewelly\"\/>\n<stringAttribute key=\"org.eclipse.jdt.launching.PROJECT_ATTR\" value=\"EclipseBejewllyProject\"\/>\n<\/launchConfiguration>\n","launchAttributes":{"org.eclipse.debug.core.MAPPED_RESOURCE_PATHS":["\/EclipseBejewllyProject\/src\/Bejewelly.java"],"org.eclipse.debug.core.MAPPED_RESOURCE_TYPES":["1"],"org.eclipse.jdt.launching.MAIN_TYPE":"Bejewelly","org.eclipse.jdt.launching.PROJECT_ATTR":"EclipseBejewllyProject"},"IDE":"eclipse","eventType":"normalLaunch","launchConfiguration":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<launchConfiguration local=\"true\" path=\"Bejewelly\"\/>\n"}